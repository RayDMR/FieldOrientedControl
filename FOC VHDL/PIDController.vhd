-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\PIDController.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: PIDController
-- Source Path: untitled/VelocityController/PIDController
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY PIDController IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        u                                 :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        y                                 :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END PIDController;


ARCHITECTURE rtl OF PIDController IS

  -- Component Declarations
  COMPONENT nfp_mul_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_add_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_mul_double
    USE ENTITY work.nfp_mul_double(rtl);

  FOR ALL : nfp_add_double
    USE ENTITY work.nfp_add_double(rtl);

  -- Signals
  SIGNAL kconst                           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Parallel_P_Gain_out1             : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst_2                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL I_Gain_out1                      : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Integrator_u_gain                : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Integrator_x_reg                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Integrator_u_add                 : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  -- Integrator
  -- 
  -- Derivative
  -- 
  -- Feedback Features

  u_nfp_mul_comp : nfp_mul_double
    PORT MAP( nfp_in1 => kconst,  -- double
              nfp_in2 => u,  -- double
              nfp_out => Parallel_P_Gain_out1  -- double
              );

  u_nfp_mul_comp_1 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_2,  -- double
              nfp_in2 => u,  -- double
              nfp_out => I_Gain_out1  -- double
              );

  u_nfp_mul_comp_2 : nfp_mul_double
    PORT MAP( nfp_in1 => kconst_1,  -- double
              nfp_in2 => I_Gain_out1,  -- double
              nfp_out => Integrator_u_gain  -- double
              );

  u_nfp_add_comp : nfp_add_double
    PORT MAP( nfp_in1 => Integrator_x_reg,  -- double
              nfp_in2 => Integrator_u_gain,  -- double
              nfp_out => Integrator_u_add  -- double
              );

  u_nfp_add_comp_1 : nfp_add_double
    PORT MAP( nfp_in1 => Parallel_P_Gain_out1,  -- double
              nfp_in2 => Integrator_x_reg,  -- double
              nfp_out => Sum_out1  -- double
              );

  kconst <= X"3f56f0068db8bac7";

  kconst_1 <= X"40c3880000000000";

  kconst_2 <= X"3fa4fdf3b645a1cb";

  Integrator_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Integrator_x_reg <= X"0000000000000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Integrator_x_reg <= Integrator_u_add;
      END IF;
    END IF;
  END PROCESS Integrator_reg_process;


  y <= Sum_out1;

END rtl;

