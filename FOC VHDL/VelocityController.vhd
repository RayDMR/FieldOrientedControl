-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\VelocityController.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: VelocityController
-- Source Path: untitled/VelocityController
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY VelocityController IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        wmref                             :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        wm                                :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        Iqref                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END VelocityController;


ARCHITECTURE rtl OF VelocityController IS

  -- Component Declarations
  COMPONENT nfp_sub_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT PIDController
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          u                               :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          y                               :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_sub_double
    USE ENTITY work.nfp_sub_double(rtl);

  FOR ALL : PIDController
    USE ENTITY work.PIDController(rtl);

  FOR ALL : nfp_convert_double2single
    USE ENTITY work.nfp_convert_double2single(rtl);

  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  -- Signals
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL PIDController_out1               : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Cast_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_sub_comp : nfp_sub_double
    PORT MAP( nfp_in1 => wmref,  -- double
              nfp_in2 => wm,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_PIDController : PIDController
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              u => Sum_out1,  -- double
              y => PIDController_out1  -- double
              );

  u_untitled_VelocityController_nfp_convert_double2single : nfp_convert_double2single
    PORT MAP( nfp_in => PIDController_out1,  -- double
              nfp_out => Cast_out1  -- single
              );

  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( nfp_in1 => kconst,  -- single
              nfp_in2 => Cast_out1,  -- single
              nfp_out => Gain_out1  -- single
              );

  kconst <= X"40555555";

  Iqref <= Gain_out1;

END rtl;

