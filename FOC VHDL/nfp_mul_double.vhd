-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\nfp_mul_double.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: nfp_mul_double
-- Source Path: untitled/CurrentController/Decoupling/nfp_mul_double
-- Hierarchy Level: 3
-- 
-- {Latency Strategy = "Zero", Denormal Handling = "off"}
-- {Mantissa Multiply Strategy = "FullMultiplier"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY nfp_mul_double IS
  PORT( nfp_in1                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_in2                           :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        nfp_out                           :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END nfp_mul_double;


ARCHITECTURE rtl OF nfp_mul_double IS

  -- Signals
  SIGNAL nfp_in1_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL aMantissa                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL nfp_in2_unsigned                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL bMantissa                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExpInforNaN_bExpInforNa_out1 : std_logic;  -- ufix1
  SIGNAL tmp_out1                         : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Switch_out1                      : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL if_bMantZero_out1                : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL Constant_out1_1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL Switch_out1_1                    : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL if_aMantZero_out1                : std_logic;  -- ufix1
  SIGNAL if_aExpInforNaN_1_out1           : std_logic;  -- ufix1
  SIGNAL if_aExpInforNaN_bExpInforNa_2_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantZero_out1  : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantZero_out1  : std_logic;  -- ufix1
  SIGNAL alphaaIsZero_bIsZero_out1        : std_logic;  -- ufix1
  SIGNAL alpha1_out1                      : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_1                : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL z2_out1                          : unsigned(105 DOWNTO 0);  -- ufix106
  SIGNAL BitSlice1_out1                   : std_logic;  -- ufix1
  SIGNAL Constant_out1_2                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL C_out1                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Constant_out1_3                  : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL C_out1_1                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_Exponent_0_out1               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Bit_Concat_out1_2                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL DTC_out1                         : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL if_Exponent_0_out1_1             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Bit_Concat_out1_3                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL DTC_out1_1                       : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL C2_out1                          : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL exp_sum_cfType_ExponentBias_out1 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL exp_out_cast_cfType_Exponen_out1 : std_logic;  -- ufix1
  SIGNAL exp_out_cast_cfType_Exponen_1_out1 : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL if_bitget_mant_ext_mant_ext_Word_2_out1 : std_logic;  -- ufix1
  SIGNAL exp_negative_out1                : std_logic;  -- ufix1
  SIGNAL exp_out_cast_cfType_Exponen_2_out1 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL if_bitget_mant_ext_mant_ext_Word_4_out1 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL exp_out_is_zero_out1             : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL if_bitget_mant_ext_mant_ext_Word_3_out1 : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL Bit_Slice_out1                   : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL if_bitget_mant_ext_mant_ext_Word_1_out1 : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL BitSlice_out1                    : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice2_out1                   : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL const_0_out1                     : std_logic;  -- ufix1
  SIGNAL if_exp_out_cast_cfType_Expone_2_out1 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL C5_out1                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL C5_out1_dtc                      : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_exp_out_cast_cfType_Expone_1_out1 : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Bit_Concat_out1_4                : unsigned(53 DOWNTO 0);  -- ufix54
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1                  : unsigned(50 DOWNTO 0);  -- ufix51
  SIGNAL Compare_To_Zero_out1_2           : std_logic;  -- ufix1
  SIGNAL BitSlice52ndBitS                 : std_logic;  -- ufix1
  SIGNAL LogicalOperatorAndOutS           : std_logic;  -- ufix1
  SIGNAL LogicalOperatorOrOutS            : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_1                  : std_logic;  -- ufix1
  SIGNAL if_exp_out_cast_cfType_Expone_3_out1 : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL BitSlice4_out1                   : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL const_2_out1                     : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL Mant_tmp_Incr_2_out1             : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(52 DOWNTO 0);  -- ufix53
  SIGNAL BitSlice2_out1_1                 : std_logic;  -- ufix1
  SIGNAL C1_out1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Add_add_cast                     : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Add_add_temp                     : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Add_out1                         : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL if_exp_out_cast_cfType_Expone_4_out1 : signed(13 DOWNTO 0);  -- sfix14
  SIGNAL Bit_Slice4_out1                  : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C2_out1_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_out_cfType_MantissaLen_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C4_out1                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_exp_out_cast_cfType_Expone_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL const_1_out1                     : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Exp_Incr_out1                    : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C_out1_2                         : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_aIsZero_bIsZero_out1          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL C2_out1_2                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL if_aExpInforNaN_bExpInforNa_out1 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Zero_out1_3           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1                   : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C1_out1_1                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aIsZero_bIsZero_1_out1        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C1_out1_2                        : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aIsZero_out1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL C_out1_3                         : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_bIsZero_out1                  : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aExpInforNaN_out1             : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL if_aExpInforNaN_bExpInforNa_1_out1 : unsigned(51 DOWNTO 0);  -- ufix52
  SIGNAL nfp_out_pack                     : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 64 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(63);
  aExponent <= nfp_in1_unsigned(62 DOWNTO 52);
  aMantissa <= nfp_in1_unsigned(51 DOWNTO 0);

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN aExponent = to_unsigned(16#7FF#, 11) ELSE
      '0';

  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 64 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(63);
  bExponent <= nfp_in2_unsigned(62 DOWNTO 52);
  bMantissa <= nfp_in2_unsigned(51 DOWNTO 0);

  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN bExponent = to_unsigned(16#7FF#, 11) ELSE
      '0';

  alphaaExpInforNaN_bExpInforNa_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  tmp_out1 <= aSign XOR bSign;

  
  Compare_To_Zero_out1 <= '1' WHEN bExponent = to_unsigned(16#000#, 11) ELSE
      '0';

  Constant_out1 <= to_unsigned(0, 52);

  
  Switch_out1 <= bMantissa WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant_out1;

  
  bMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(0, 52) ELSE
      '0';

  
  if_bMantZero_out1 <= bSign WHEN bMantissa_0_out1 = '0' ELSE
      tmp_out1;

  
  Compare_To_Zero_out1_1 <= '1' WHEN aExponent = to_unsigned(16#000#, 11) ELSE
      '0';

  Constant_out1_1 <= to_unsigned(0, 52);

  
  Switch_out1_1 <= aMantissa WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Constant_out1_1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1_1 = to_unsigned(0, 52) ELSE
      '0';

  
  if_aMantZero_out1 <= aSign WHEN aMantissa_0_out1 = '0' ELSE
      tmp_out1;

  
  if_aExpInforNaN_1_out1 <= if_bMantZero_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_aMantZero_out1;

  
  if_aExpInforNaN_bExpInforNa_2_out1 <= tmp_out1 WHEN alphaaExpInforNaN_bExpInforNa_out1 = '0' ELSE
      if_aExpInforNaN_1_out1;

  alphaaExponent_0_aMantZero_out1 <= Compare_To_Zero_out1_1 AND aMantissa_0_out1;

  alphabExponent_0_bMantZero_out1 <= Compare_To_Zero_out1 AND bMantissa_0_out1;

  alphaaIsZero_bIsZero_out1 <= alphaaExponent_0_aMantZero_out1 OR alphabExponent_0_bMantZero_out1;

  alpha1_out1 <= '1';

  alpha0_out1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1 WHEN Compare_To_Zero_out1_1 = '0' ELSE
      alpha0_out1;

  Bit_Concat_out1 <= if_Exponent_0_cfType_Exp_out1 & Switch_out1_1;

  alpha1_out1_1 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_1 WHEN Compare_To_Zero_out1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat_out1_1 <= if_Exponent_0_cfType_Exp_out1_1 & Switch_out1;

  z2_out1 <= Bit_Concat_out1 * Bit_Concat_out1_1;

  BitSlice1_out1 <= z2_out1(105);

  Constant_out1_2 <= to_unsigned(16#0#, 3);

  C_out1 <= to_unsigned(16#001#, 11);

  Constant_out1_3 <= to_unsigned(16#0#, 3);

  C_out1_1 <= to_unsigned(16#001#, 11);

  
  if_Exponent_0_out1 <= aExponent WHEN Compare_To_Zero_out1_1 = '0' ELSE
      C_out1;

  Bit_Concat_out1_2 <= Constant_out1_2 & if_Exponent_0_out1;

  DTC_out1 <= signed(Bit_Concat_out1_2);

  
  if_Exponent_0_out1_1 <= bExponent WHEN Compare_To_Zero_out1 = '0' ELSE
      C_out1_1;

  Bit_Concat_out1_3 <= Constant_out1_3 & if_Exponent_0_out1_1;

  DTC_out1_1 <= signed(Bit_Concat_out1_3);

  exp_a_norm_exp_b_norm_out1 <= DTC_out1 + DTC_out1_1;

  C2_out1 <= to_signed(-16#03FF#, 14);

  exp_sum_cfType_ExponentBias_out1 <= exp_a_norm_exp_b_norm_out1 + C2_out1;

  
  exp_out_cast_cfType_Exponen_out1 <= '1' WHEN exp_sum_cfType_ExponentBias_out1 > to_signed(16#07FE#, 14) ELSE
      '0';

  
  exp_out_cast_cfType_Exponen_1_out1 <= '1' WHEN exp_sum_cfType_ExponentBias_out1 = to_signed(16#07FE#, 14) ELSE
      '0';

  Logical_Operator1_out1 <= exp_out_cast_cfType_Exponen_1_out1 OR exp_out_cast_cfType_Exponen_out1;

  
  if_bitget_mant_ext_mant_ext_Word_2_out1 <= exp_out_cast_cfType_Exponen_out1 WHEN BitSlice1_out1 = '0' ELSE
      Logical_Operator1_out1;

  exp_negative_out1 <= exp_sum_cfType_ExponentBias_out1(13);

  
  exp_out_cast_cfType_Exponen_2_out1 <= '1' WHEN exp_sum_cfType_ExponentBias_out1 /= to_signed(-16#0001#, 14) ELSE
      '0';

  Logical_Operator4_out1 <= exp_out_cast_cfType_Exponen_2_out1 AND exp_negative_out1;

  
  if_bitget_mant_ext_mant_ext_Word_4_out1 <= exp_negative_out1 WHEN BitSlice1_out1 = '0' ELSE
      Logical_Operator4_out1;

  Logical_Operator_out1 <= if_bitget_mant_ext_mant_ext_Word_2_out1 OR if_bitget_mant_ext_mant_ext_Word_4_out1;

  
  exp_out_is_zero_out1 <= '1' WHEN exp_sum_cfType_ExponentBias_out1 = to_signed(16#0000#, 14) ELSE
      '0';

  Logical_Operator3_out1 <= exp_negative_out1 OR exp_out_is_zero_out1;

  
  if_bitget_mant_ext_mant_ext_Word_3_out1 <= Logical_Operator3_out1 WHEN BitSlice1_out1 = '0' ELSE
      exp_negative_out1;

  Bit_Slice1_out1 <= z2_out1(104 DOWNTO 51);

  Bit_Slice_out1 <= z2_out1(105 DOWNTO 52);

  
  if_bitget_mant_ext_mant_ext_Word_1_out1 <= Bit_Slice1_out1 WHEN BitSlice1_out1 = '0' ELSE
      Bit_Slice_out1;

  BitSlice_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(52 DOWNTO 0);

  BitSlice2_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(53 DOWNTO 1);

  const_0_out1 <= '0';

  
  if_exp_out_cast_cfType_Expone_2_out1 <= BitSlice_out1 WHEN if_bitget_mant_ext_mant_ext_Word_3_out1 = '0' ELSE
      BitSlice2_out1;

  C5_out1 <= to_unsigned(16#000000#, 24);

  C5_out1_dtc <= resize(C5_out1, 53);

  
  if_exp_out_cast_cfType_Expone_1_out1 <= if_exp_out_cast_cfType_Expone_2_out1 WHEN Logical_Operator_out1 = '0' ELSE
      C5_out1_dtc;

  Bit_Concat_out1_4 <= const_0_out1 & if_exp_out_cast_cfType_Expone_1_out1;

  BitSlice1_out1_1 <= Bit_Concat_out1_4(1);

  Bit_Slice2_out1 <= z2_out1(50 DOWNTO 0);

  
  Compare_To_Zero_out1_2 <= '1' WHEN Bit_Slice2_out1 /= to_unsigned(0, 51) ELSE
      '0';

  BitSlice52ndBitS <= z2_out1(51);

  LogicalOperatorAndOutS <= BitSlice1_out1 AND BitSlice52ndBitS;

  LogicalOperatorOrOutS <= Compare_To_Zero_out1_2 OR LogicalOperatorAndOutS;

  Bit_Slice3_out1 <= if_bitget_mant_ext_mant_ext_Word_1_out1(0);

  Logical_Operator2_out1 <= LogicalOperatorOrOutS OR Bit_Slice3_out1;

  BitSlice_out1_1 <= Bit_Concat_out1_4(0);

  
  if_exp_out_cast_cfType_Expone_3_out1 <= LogicalOperatorOrOutS WHEN if_bitget_mant_ext_mant_ext_Word_3_out1 = '0' ELSE
      Logical_Operator2_out1;

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_1 OR if_exp_out_cast_cfType_Expone_3_out1;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_1 AND alphabitget_Mant_tmp_2_0_out1;

  BitSlice4_out1 <= Bit_Concat_out1_4(53 DOWNTO 1);

  const_2_out1 <= to_unsigned(1, 53);

  Mant_tmp_Incr_2_out1 <= BitSlice4_out1 + const_2_out1;

  
  if_bitget_Mant_tmp_1_0_out1 <= BitSlice4_out1 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_Incr_2_out1;

  BitSlice2_out1_1 <= if_bitget_Mant_tmp_1_0_out1(52);

  C1_out1 <= to_unsigned(16#001#, 11);

  Add_add_cast <= signed(resize(C1_out1, 15));
  Add_add_temp <= resize(exp_sum_cfType_ExponentBias_out1, 15) + Add_add_cast;
  Add_out1 <= Add_add_temp(13 DOWNTO 0);

  
  if_exp_out_cast_cfType_Expone_4_out1 <= exp_sum_cfType_ExponentBias_out1 WHEN BitSlice1_out1 = '0' ELSE
      Add_out1;

  Bit_Slice4_out1 <= unsigned(if_exp_out_cast_cfType_Expone_4_out1(10 DOWNTO 0));

  C2_out1_1 <= to_unsigned(16#000#, 11);

  
  if_exp_out_cfType_MantissaLen_out1 <= Bit_Slice4_out1 WHEN if_bitget_mant_ext_mant_ext_Word_3_out1 = '0' ELSE
      C2_out1_1;

  C4_out1 <= to_unsigned(16#7FF#, 11);

  
  if_exp_out_cast_cfType_Expone_out1 <= if_exp_out_cfType_MantissaLen_out1 WHEN if_bitget_mant_ext_mant_ext_Word_2_out1 = '0' ELSE
      C4_out1;

  const_1_out1 <= to_unsigned(16#001#, 11);

  Exp_Incr_out1 <= if_exp_out_cast_cfType_Expone_out1 + const_1_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= if_exp_out_cast_cfType_Expone_out1 WHEN BitSlice2_out1_1 = '0' ELSE
      Exp_Incr_out1;

  C_out1_2 <= to_unsigned(16#000#, 11);

  
  if_aIsZero_bIsZero_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN alphaaIsZero_bIsZero_out1 = '0' ELSE
      C_out1_2;

  C2_out1_2 <= to_unsigned(16#7FF#, 11);

  
  if_aExpInforNaN_bExpInforNa_out1 <= if_aIsZero_bIsZero_out1 WHEN alphaaExpInforNaN_bExpInforNa_out1 = '0' ELSE
      C2_out1_2;

  
  Compare_To_Zero_out1_3 <= '1' WHEN if_exp_out_cast_cfType_Expone_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  Logical_Operator_out1_1 <= Compare_To_Zero_out1_3 OR BitSlice2_out1_1;

  Logical_Operator_out1_2 <= alphaaIsZero_bIsZero_out1 OR Logical_Operator_out1_1;

  BitSlice3_out1 <= if_bitget_Mant_tmp_1_0_out1(51 DOWNTO 0);

  C1_out1_1 <= to_unsigned(0, 52);

  
  if_aIsZero_bIsZero_1_out1 <= BitSlice3_out1 WHEN Logical_Operator_out1_2 = '0' ELSE
      C1_out1_1;

  C1_out1_2 <= unsigned'(X"8000000000000");

  
  if_aIsZero_out1 <= Switch_out1 WHEN alphaaExponent_0_aMantZero_out1 = '0' ELSE
      C1_out1_2;

  C_out1_3 <= unsigned'(X"8000000000000");

  
  if_bIsZero_out1 <= Switch_out1_1 WHEN alphabExponent_0_bMantZero_out1 = '0' ELSE
      C_out1_3;

  
  if_aExpInforNaN_out1 <= if_aIsZero_out1 WHEN aExponent_cfType_Exponent_I_out1 = '0' ELSE
      if_bIsZero_out1;

  
  if_aExpInforNaN_bExpInforNa_1_out1 <= if_aIsZero_bIsZero_1_out1 WHEN alphaaExpInforNaN_bExpInforNa_out1 = '0' ELSE
      if_aExpInforNaN_out1;

  -- Combine FP sign, exponent, mantissa into 64 bit word
  nfp_out_pack <= if_aExpInforNaN_bExpInforNa_2_out1 & if_aExpInforNaN_bExpInforNa_out1 & if_aExpInforNaN_bExpInforNa_1_out1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

