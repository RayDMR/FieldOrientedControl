-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\Park_Transform.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Park_Transform
-- Source Path: untitled/abc2dq/Park Transform
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.untitled_pkg.ALL;

ENTITY Park_Transform IS
  PORT( abc                               :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
        theta                             :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        dq0                               :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END Park_Transform;


ARCHITECTURE rtl OF Park_Transform IS

  -- Component Declarations
  COMPONENT d
    PORT( u                               :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT q
    PORT( u                               :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT alpha0
    PORT( u                               :   IN    vector_of_std_logic_vector32(0 TO 3);  -- single [4]
          y                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mul_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : d
    USE ENTITY work.d(rtl);

  FOR ALL : q
    USE ENTITY work.q(rtl);

  FOR ALL : alpha0
    USE ENTITY work.alpha0(rtl);

  FOR ALL : nfp_mul_single
    USE ENTITY work.nfp_mul_single(rtl);

  -- Signals
  SIGNAL Mux2_out1                        : vector_of_std_logic_vector32(0 TO 3);  -- ufix32 [4]
  SIGNAL d_out1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL kconst                           : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL q_out1                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL alpha0_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain1_out1                       : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  u_d : d
    PORT MAP( u => Mux2_out1,  -- single [4]
              y => d_out1  -- single
              );

  u_q : q
    PORT MAP( u => Mux2_out1,  -- single [4]
              y => q_out1  -- single
              );

  u_0 : alpha0
    PORT MAP( u => Mux2_out1,  -- single [4]
              y => alpha0_out1  -- single
              );

  u_nfp_mul_comp : nfp_mul_single
    PORT MAP( nfp_in1 => d_out1,  -- single
              nfp_in2 => kconst(0),  -- single
              nfp_out => Gain1_out1(0)  -- single
              );

  u_nfp_mul_comp_1 : nfp_mul_single
    PORT MAP( nfp_in1 => q_out1,  -- single
              nfp_in2 => kconst(1),  -- single
              nfp_out => Gain1_out1(1)  -- single
              );

  u_nfp_mul_comp_2 : nfp_mul_single
    PORT MAP( nfp_in1 => alpha0_out1,  -- single
              nfp_in2 => kconst(2),  -- single
              nfp_out => Gain1_out1(2)  -- single
              );

  Mux2_out1(0) <= abc(0);
  Mux2_out1(1) <= abc(1);
  Mux2_out1(2) <= abc(2);
  Mux2_out1(3) <= theta;

  kconst(0) <= X"3f2aaaab";
  kconst(1) <= X"3f2aaaab";
  kconst(2) <= X"3f2aaaab";


  dq0 <= Gain1_out1;

END rtl;

