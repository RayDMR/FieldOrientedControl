-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\thm2the.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: thm2the
-- Source Path: untitled/thm2the
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY thm2the IS
  PORT( thm                               :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        the                               :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
        );
END thm2the;


ARCHITECTURE rtl OF thm2the IS

  -- Component Declarations
  COMPONENT nfp_gain_pow2_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic;  -- ufix1
          nfp_in3                         :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT nfp_mod_single
    PORT( nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_gain_pow2_double
    USE ENTITY work.nfp_gain_pow2_double(rtl);

  FOR ALL : nfp_convert_double2single
    USE ENTITY work.nfp_convert_double2single(rtl);

  FOR ALL : nfp_mod_single
    USE ENTITY work.nfp_mod_single(rtl);

  -- Signals
  SIGNAL pw2_sign_const                   : std_logic;  -- ufix1
  SIGNAL pw2_shift_const                  : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL PolePairs_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Cast1_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Cast_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Mod_out1                         : std_logic_vector(31 DOWNTO 0);  -- ufix32

BEGIN
  u_nfp_gain_pow2_double : nfp_gain_pow2_double
    PORT MAP( nfp_in1 => thm,  -- double
              nfp_in2 => pw2_sign_const,  -- ufix1
              nfp_in3 => std_logic_vector(pw2_shift_const),  -- sfix12
              nfp_out => PolePairs_out1  -- double
              );

  u_untitled_VelocityController_nfp_convert_double2single : nfp_convert_double2single
    PORT MAP( nfp_in => PolePairs_out1,  -- double
              nfp_out => Cast1_out1  -- single
              );

  u_untitled_VelocityController_nfp_convert_double2single_1 : nfp_convert_double2single
    PORT MAP( nfp_in => Constant_out1,  -- double
              nfp_out => Cast_out1  -- single
              );

  u_nfp_mod_comp : nfp_mod_single
    PORT MAP( nfp_in1 => Cast1_out1,  -- single
              nfp_in2 => Cast_out1,  -- single
              nfp_out => Mod_out1  -- single
              );

  pw2_sign_const <= '0';

  pw2_shift_const <= to_signed(16#001#, 12);

  Constant_out1 <= X"401921fb54442d18";

  the <= Mod_out1;

END rtl;

