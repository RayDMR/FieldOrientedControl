-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\Decoupling.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Decoupling
-- Source Path: untitled/CurrentController/Decoupling
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Decoupling IS
  PORT( Id                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Iq                                :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        we                                :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        VdFF                              :   OUT   std_logic_vector(63 DOWNTO 0);  -- double
        VqFF                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
        );
END Decoupling;


ARCHITECTURE rtl OF Decoupling IS

  -- Component Declarations
  COMPONENT nfp_convert_single2double
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_mul_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_uminus_double
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT nfp_add_double
    PORT( nfp_in1                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_in2                         :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_convert_single2double
    USE ENTITY work.nfp_convert_single2double(rtl);

  FOR ALL : nfp_mul_double
    USE ENTITY work.nfp_mul_double(rtl);

  FOR ALL : nfp_uminus_double
    USE ENTITY work.nfp_uminus_double(rtl);

  FOR ALL : nfp_add_double
    USE ENTITY work.nfp_add_double(rtl);

  -- Signals
  SIGNAL Cast_out1                        : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product_out1                     : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product3_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Gain1_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Cast2_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant1_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product1_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Constant2_out1                   : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Sum_out1                         : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Product2_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64

BEGIN
  -- VqFF = Ld*Id*we + Phi*we
  -- 
  -- VdFF = -Lq*Iq*we

  u_untitled_CurrentController_nfp_convert_single2double : nfp_convert_single2double
    PORT MAP( nfp_in => Iq,  -- single
              nfp_out => Cast_out1  -- double
              );

  u_nfp_mul_comp : nfp_mul_double
    PORT MAP( nfp_in1 => Cast_out1,  -- double
              nfp_in2 => Constant_out1,  -- double
              nfp_out => Product_out1  -- double
              );

  u_nfp_mul_comp_1 : nfp_mul_double
    PORT MAP( nfp_in1 => Product_out1,  -- double
              nfp_in2 => we,  -- double
              nfp_out => Product3_out1  -- double
              );

  u_nfp_uminus_comp : nfp_uminus_double
    PORT MAP( nfp_in => Product3_out1,  -- double
              nfp_out => Gain1_out1  -- double
              );

  u_untitled_CurrentController_nfp_convert_single2double_1 : nfp_convert_single2double
    PORT MAP( nfp_in => Id,  -- single
              nfp_out => Cast2_out1  -- double
              );

  u_nfp_mul_comp_2 : nfp_mul_double
    PORT MAP( nfp_in1 => Cast2_out1,  -- double
              nfp_in2 => Constant1_out1,  -- double
              nfp_out => Product1_out1  -- double
              );

  u_nfp_add_comp : nfp_add_double
    PORT MAP( nfp_in1 => Product1_out1,  -- double
              nfp_in2 => Constant2_out1,  -- double
              nfp_out => Sum_out1  -- double
              );

  u_nfp_mul_comp_3 : nfp_mul_double
    PORT MAP( nfp_in1 => Sum_out1,  -- double
              nfp_in2 => we,  -- double
              nfp_out => Product2_out1  -- double
              );

  Constant_out1 <= X"3f947ae147ae147b";

  Constant1_out1 <= X"3f847ae147ae147b";

  Constant2_out1 <= X"3fb999999999999a";

  VdFF <= Gain1_out1;

  VqFF <= Product2_out1;

END rtl;

