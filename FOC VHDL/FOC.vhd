-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\untitled.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 10000
-- Target subsystem base rate: 10000
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        10000
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Vabc                          ce_out        10000
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: untitled
-- Source Path: untitled
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.untitled_pkg.ALL;

ENTITY untitled IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        wmref                             :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        wm                                :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        Iabc                              :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
        thetam                            :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        ce_out                            :   OUT   std_logic;
        Vabc                              :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END untitled;


ARCHITECTURE rtl OF untitled IS

  -- Component Declarations
  COMPONENT VelocityController
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          wmref                           :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          wm                              :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          Iqref                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT thm2the
    PORT( thm                             :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          the                             :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT abc2dq
    PORT( Iabc                            :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          thetae                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Id                              :   OUT   std_logic_vector(31 DOWNTO 0);  -- single
          Iq                              :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT wm2we
    PORT( wm                              :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          we                              :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT CurrentController
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Idref                           :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          Iqref                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Id                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Iq                              :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          we                              :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          Vdref                           :   OUT   std_logic_vector(63 DOWNTO 0);  -- double
          Vqref                           :   OUT   std_logic_vector(63 DOWNTO 0)  -- double
          );
  END COMPONENT;

  COMPONENT dq2abc
    PORT( Vd                              :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          Vq                              :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          thetae                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          Vabc                            :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : VelocityController
    USE ENTITY work.VelocityController(rtl);

  FOR ALL : thm2the
    USE ENTITY work.thm2the(rtl);

  FOR ALL : abc2dq
    USE ENTITY work.abc2dq(rtl);

  FOR ALL : wm2we
    USE ENTITY work.wm2we(rtl);

  FOR ALL : CurrentController
    USE ENTITY work.CurrentController(rtl);

  FOR ALL : dq2abc
    USE ENTITY work.dq2abc(rtl);

  -- Signals
  SIGNAL Idref_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL VelocityController_out1          : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL thm2the_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL abc2dq_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL abc2dq_out2                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL wm2we_out1                       : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL CurrentController_out1           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL CurrentController_out2           : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL dq2abc_out1                      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  -- Inverse Park Transform
  -- 
  -- Park_Transform
  -- 
  -- Motor w
  -- 
  -- Desired motor w
  -- 
  -- Motor current
  -- 
  -- Motor position

  u_VelocityController : VelocityController
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              wmref => wmref,  -- double
              wm => wm,  -- double
              Iqref => VelocityController_out1  -- single
              );

  u_thm2the : thm2the
    PORT MAP( thm => thetam,  -- double
              the => thm2the_out1  -- single
              );

  u_abc2dq : abc2dq
    PORT MAP( Iabc => Iabc,  -- single [3]
              thetae => thm2the_out1,  -- single
              Id => abc2dq_out1,  -- single
              Iq => abc2dq_out2  -- single
              );

  u_wm2we : wm2we
    PORT MAP( wm => wm,  -- double
              we => wm2we_out1  -- double
              );

  u_CurrentController : CurrentController
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Idref => Idref_out1,  -- double
              Iqref => VelocityController_out1,  -- single
              Id => abc2dq_out1,  -- single
              Iq => abc2dq_out2,  -- single
              we => wm2we_out1,  -- double
              Vdref => CurrentController_out1,  -- double
              Vqref => CurrentController_out2  -- double
              );

  u_dq2abc : dq2abc
    PORT MAP( Vd => CurrentController_out1,  -- double
              Vq => CurrentController_out2,  -- double
              thetae => thm2the_out1,  -- single
              Vabc => dq2abc_out1  -- single [3]
              );

  Idref_out1 <= X"0000000000000000";

  ce_out <= clk_enable;

  Vabc <= dq2abc_out1;

END rtl;

