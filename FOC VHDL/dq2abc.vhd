-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\dq2abc.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dq2abc
-- Source Path: untitled/dq2abc
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.untitled_pkg.ALL;

ENTITY dq2abc IS
  PORT( Vd                                :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        Vq                                :   IN    std_logic_vector(63 DOWNTO 0);  -- double
        thetae                            :   IN    std_logic_vector(31 DOWNTO 0);  -- single
        Vabc                              :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
        );
END dq2abc;


ARCHITECTURE rtl OF dq2abc IS

  -- Component Declarations
  COMPONENT nfp_convert_double2single
    PORT( nfp_in                          :   IN    std_logic_vector(63 DOWNTO 0);  -- double
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT Inverse_Park_Transform
    PORT( dq0                             :   IN    vector_of_std_logic_vector32(0 TO 2);  -- single [3]
          theta                           :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          abc                             :   OUT   vector_of_std_logic_vector32(0 TO 2)  -- single [3]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : nfp_convert_double2single
    USE ENTITY work.nfp_convert_double2single(rtl);

  FOR ALL : Inverse_Park_Transform
    USE ENTITY work.Inverse_Park_Transform(rtl);

  -- Signals
  SIGNAL Constant_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL Cast_out1                        : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]
  SIGNAL Inverse_Park_Transform_out1      : vector_of_std_logic_vector32(0 TO 2);  -- ufix32 [3]

BEGIN
  u_untitled_VelocityController_nfp_convert_double2single : nfp_convert_double2single
    PORT MAP( nfp_in => Vd,  -- double
              nfp_out => Cast_out1(0)  -- single
              );

  u_untitled_VelocityController_nfp_convert_double2single_1 : nfp_convert_double2single
    PORT MAP( nfp_in => Vq,  -- double
              nfp_out => Cast_out1(1)  -- single
              );

  u_untitled_VelocityController_nfp_convert_double2single_2 : nfp_convert_double2single
    PORT MAP( nfp_in => Constant_out1,  -- double
              nfp_out => Cast_out1(2)  -- single
              );

  u_Inverse_Park_Transform : Inverse_Park_Transform
    PORT MAP( dq0 => Cast_out1,  -- single [3]
              theta => thetae,  -- single
              abc => Inverse_Park_Transform_out1  -- single [3]
              );

  Constant_out1 <= X"0000000000000000";


  Vabc <= Inverse_Park_Transform_out1;

END rtl;

