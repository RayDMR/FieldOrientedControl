-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\untitled\nfp_mod_single.vhd
-- Created: 2020-07-03 00:04:52
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: nfp_mod_single
-- Source Path: untitled/thm2the/nfp_mod_single
-- Hierarchy Level: 2
-- 
-- {Latency Strategy = "Zero", Denormal Handling = "off"}
-- {CheckResetToZero = "on"}
-- {MaxIterations = "32"}
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY nfp_mod_single IS
  PORT( nfp_in1                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_in2                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        nfp_out                           :   OUT   std_logic_vector(31 DOWNTO 0)  -- ufix32
        );
END nfp_mod_single;


ARCHITECTURE rtl OF nfp_mod_single IS

  -- Signals
  SIGNAL nfp_in2_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL bSign                            : std_logic;  -- ufix1
  SIGNAL bExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL bMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant8_out1                   : std_logic;  -- ufix1
  SIGNAL Constant3_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL nfp_in1_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL aSign                            : std_logic;  -- ufix1
  SIGNAL aExponent                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL aMantissa                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1             : std_logic;  -- ufix1
  SIGNAL Constant_out1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1                      : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL aExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL bExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1_1           : std_logic;  -- ufix1
  SIGNAL Constant_out1_1                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch_out1_1                    : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL aExponent_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_0_aMantissa_out1  : std_logic;  -- ufix1
  SIGNAL bExponent_cfType_Exponent_I_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1 : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1_1 : std_logic;  -- ufix1
  SIGNAL bMantissa_0_out1                 : std_logic;  -- ufix1
  SIGNAL alphabExponent_0_bMantissa_out1  : std_logic;  -- ufix1
  SIGNAL alphaaExponent_cfType_Exponent_out1_2 : std_logic;  -- ufix1
  SIGNAL alpha0_out1                      : std_logic;  -- ufix1
  SIGNAL Exponent_0_out1                  : std_logic;  -- ufix1
  SIGNAL C_out1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC_out1                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Exponent_0_out1_1                : std_logic;  -- ufix1
  SIGNAL C_out1_1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_Exponent_0_out1_1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL DTC1_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_a_norm_exp_b_norm_sub_temp   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_a_norm_exp_b_norm_out1       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC1_out1_1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha1_out1                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL cfType_Exponent_Inf_or_NaN_out1  : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_cfType_Exp_out1  : std_logic;  -- ufix1
  SIGNAL alpha1_out1_1                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_1                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1    : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat1_out1                 : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice2_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1           : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1          : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1          : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_1               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_1         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_1               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_1        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_1        : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_2               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_2               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_2                : std_logic;  -- ufix1
  SIGNAL Constant_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator4_out1_2         : std_logic;  -- ufix1
  SIGNAL Constant10_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator6_out1_2         : std_logic;  -- ufix1
  SIGNAL Switch15_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1          : std_logic;  -- ufix1
  SIGNAL Switch21_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch13_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_1                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1_1        : std_logic;  -- ufix1
  SIGNAL Switch13_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch33_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_2                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch13_out1_2                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch34_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL exp_norm_p_sub_cast              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_norm_p_sub_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_norm_p_out1                  : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL Bit_Slice1_out1_1                : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1            : std_logic;  -- ufix1
  SIGNAL alpha24_out1                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice4_out1_1                : std_logic;  -- ufix1
  SIGNAL BitSlice_out1                    : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1           : std_logic;  -- ufix1
  SIGNAL C2_out1                          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_2                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Logical_Operator_out1_1          : std_logic;  -- ufix1
  SIGNAL exp_diff_2_add_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_2_out1                  : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_1_add_temp              : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_1_out1                  : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC_out1_1                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_exp_diff_0_1_out1             : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_3                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1               : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_1                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_4                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_1         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_1             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_2                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_5                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_2         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_2             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_3                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_6                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_3         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_3             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_4                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_7                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_4         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_4             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_5                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_8                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_5         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_5             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_6                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_9                         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_6         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_6             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_7                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_10                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_7         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_7             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_8                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_11                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_8         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_8             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_9                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_12                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_9         : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_9             : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_10                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_13                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_10        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_10            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_11                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_14                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_11        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_11            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_12                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Compare_To_Constant_out1         : std_logic;  -- ufix1
  SIGNAL alpha1_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Switch_out1_2                    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_max_exp_2diff_1_sub_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_max_exp_2diff_1_out1    : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC1_out1_2                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL alpha24_pos_sub_temp             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL alpha24_pos_out1                 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC2_out1                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL alpha0_out1_2                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL cfType_Exponent_Inf_or_NaN_out1_1 : std_logic;  -- ufix1
  SIGNAL alphaExponent_0_cfType_Exp_out1_1 : std_logic;  -- ufix1
  SIGNAL alpha1_out1_3                    : std_logic;  -- ufix1
  SIGNAL alpha0_out1_3                    : std_logic;  -- ufix1
  SIGNAL if_Exponent_0_cfType_Exp_out1_1  : std_logic;  -- ufix1
  SIGNAL Bit_Concat_out1_1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_2                : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL reinterpretcast_bitconcat_fi_0_out1_1 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphamant_b_norm_in0             : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphamant_b_norm_out1            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL mant_a_norm_mB_add_temp          : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mant_a_norm_mB_out1              : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC2_out1_1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL if_tmp_0_out1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_mant_a_norm_1_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_mant_b_norm_1_out1        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphatmp1_in0                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphatmp1_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp1_m2B_add_temp                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_m2B_out1                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC5_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_2                : std_logic;  -- ufix1
  SIGNAL tmp1_mant_b_norm_add_temp        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_mant_b_norm_out1            : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC_out1_2                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL alphatmp2_in0                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphatmp2_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp1_m3B_add_temp                : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_m3B_out1                    : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC6_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_2                 : std_logic;  -- ufix1
  SIGNAL if_tmp4_0_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL tmp1_mB_add_temp                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL tmp1_mB_out1                     : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC4_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_1                : std_logic;  -- ufix1
  SIGNAL if_tmp2_0_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_tmp3_0_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_bitget_exp_diff_1_0_out1      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_0_out1               : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_3                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp                    : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1                        : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_2                : std_logic;  -- ufix1
  SIGNAL Switch1_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1                         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_3                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_1                : std_logic;  -- ufix1
  SIGNAL Switch_out1_3                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_1                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_4                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_1                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_1                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_3                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_1                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_1                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_4                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_2                : std_logic;  -- ufix1
  SIGNAL Switch_out1_4                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_1                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_1          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_2                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_2                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_2                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_5                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_2                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_2                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_4                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_2                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_2                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_5                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_3                : std_logic;  -- ufix1
  SIGNAL Switch_out1_5                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_2                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_2          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_3                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_3                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_3                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_6                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_3                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_3                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_5                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_3                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_3                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_6                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_4                : std_logic;  -- ufix1
  SIGNAL Switch_out1_6                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_3                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_3          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_4                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_4                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_4                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_7                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_4                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_4                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_6                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_4                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_4                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_7                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_5                : std_logic;  -- ufix1
  SIGNAL Switch_out1_7                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_4                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_4          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_5                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_5                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_5                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_8                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_5                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_5                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_7                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_5                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_5                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_5                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_8                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_6                : std_logic;  -- ufix1
  SIGNAL Switch_out1_8                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_5                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_5          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_6                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_6                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_6                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_9                : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_6                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_6                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_8                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_6                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_6                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_6                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_9                 : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_7                : std_logic;  -- ufix1
  SIGNAL Switch_out1_9                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_6                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_6          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_7                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_7                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_7                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_10               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_7                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_7                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_9                : std_logic;  -- ufix1
  SIGNAL Switch1_out1_7                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_7                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_7                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_10                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_8                : std_logic;  -- ufix1
  SIGNAL Switch_out1_10                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_7                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_7          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_8                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_8                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_8                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_11               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_8                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_8                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_10               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_8                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_8                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_8                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_11                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_9                : std_logic;  -- ufix1
  SIGNAL Switch_out1_11                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_8                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_8          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_9                 : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_9                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_9                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_12               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_9                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_9                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_11               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_9                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_9                   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_9                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_12                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_10               : std_logic;  -- ufix1
  SIGNAL Switch_out1_12                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_9                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_9          : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_10                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_10                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_10                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_13               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_10                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_10                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_12               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_10                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_10                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_10                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_13                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_11               : std_logic;  -- ufix1
  SIGNAL Switch_out1_13                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_10                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_10         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_11                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_11                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_11                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_14               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_11                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_11                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_13               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_11                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_11                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_11                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_14                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_12               : std_logic;  -- ufix1
  SIGNAL Switch_out1_14                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_11                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_11         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_out1                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsll_R_1_mant_b_norm_relop1    : std_logic;
  SIGNAL mant_b_norm_R_sub_temp           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mant_b_norm_R_out1               : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL DTC_out1_3                       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_bitsll_R_1_mant_b_norm_out1   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL shift_arithmetic_zerosig         : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL shift_arithmetic_selsig          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_zerosig            : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_selsig             : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Shift_Arithmetic_out1            : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL bitsrl_x_pos_0_out1              : std_logic;  -- ufix1
  SIGNAL bitsll_x_shift_length_zerosig    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsll_x_shift_length_selsig     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_zerosig_1          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_selsig_1           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsll_x_shift_length_out1       : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL BitSlice_out1_1                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Compare_To_Constant1_out1        : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero_out1_2           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_2          : std_logic;  -- ufix1
  SIGNAL x_0_out1                         : std_logic;  -- ufix1
  SIGNAL pos_0_out1                       : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp2_tmp3_relop1                 : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1           : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_1         : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_3          : std_logic;  -- ufix1
  SIGNAL C_out1_15                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_diff_in_2_add_temp_12        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_12            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_13                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL C_out1_16                        : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Shift_out1_12                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_12                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_12                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_15               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_12                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_12                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_14               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_12                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_12                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_12                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_15                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_13               : std_logic;  -- ufix1
  SIGNAL Switch_out1_15                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_12                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_12         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_13                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_13                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_13                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_16               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_13                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_13                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_15               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_13                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_13                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_13                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_16                : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_14               : std_logic;  -- ufix1
  SIGNAL Switch_out1_16                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_13                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_13         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Shift_out1_14                : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add1_add_temp_14                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add1_out1_14                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice1_out1_17               : std_logic;  -- ufix1
  SIGNAL Add2_add_temp_14                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add2_out1_14                     : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice2_out1_16               : std_logic;  -- ufix1
  SIGNAL Switch1_out1_14                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Add_add_temp_14                  : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Add_out1_14                      : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Bit_Slice_out1_17                : std_logic;  -- ufix1
  SIGNAL exp_diff_in_2_add_temp_13        : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_diff_in_2_out1_13            : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC3_out1_14                     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL Bit_Slice3_out1_15               : std_logic;  -- ufix1
  SIGNAL Switch_out1_17                   : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL Switch2_out1_14                  : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_exp_diff_in_0_out1_14         : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL R_in_0_out1                      : std_logic;  -- ufix1
  SIGNAL alphasign_diff_1_R_in_0_out1     : std_logic;  -- ufix1
  SIGNAL alpha0_out1_4                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat_out1_3                : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL reinterpretcast_bitconcat_R_in_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL exp_b_norm_exp_a_norm_sub_temp   : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_b_norm_exp_a_norm_out1       : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL DTC_out1_4                       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL shift_length_0_out1              : std_logic;  -- ufix1
  SIGNAL alphaR_ext_in0                   : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL alphaR_ext_out1                  : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL shift_length_cfType_Mantiss_out1 : std_logic;  -- ufix1
  SIGNAL bitsra_r_ext_shift_length_zerosig : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsra_r_ext_shift_length_selsig : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_zerosig_2          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL dynamic_shift_selsig_2           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL bitsra_R_ext_shift_length_out1   : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL C_out1_17                        : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_shift_length_cfType_Mantis_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL alphamB1_in0                     : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL alphamB1_out1                    : signed(27 DOWNTO 0);  -- sfix28
  SIGNAL if_shift_length_0_out1           : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL alpha1_out1_4                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Bit_Concat1_out1_1               : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL reinterpretcast_bitconcat_mB1_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL mB1_ext_R_ext_add_temp           : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL mB1_ext_R_ext_out1               : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL BitSlice_out1_2                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_1         : std_logic;  -- ufix1
  SIGNAL BitSlice1_out1_1                 : std_logic;  -- ufix1
  SIGNAL alphabitget_R_ext_cfType_Mantissa_out1 : std_logic;  -- ufix1
  SIGNAL bitsll_R_ext_1_out1              : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_bitget_R_ext_cfType_Mantissa_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL if_sign_diff_1_R_in_0_out1       : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL BitSlice3_out1                   : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL R_0_out1                         : std_logic;  -- ufix1
  SIGNAL reset_to_zero_R_0_out1           : std_logic;  -- ufix1
  SIGNAL if_exp_a_norm_exp_b_norm_out1    : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_1_like_exp_R_out1           : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_R_cast_1_like_exp_R_sub_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_R_cast_1_like_exp_R_out1     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_bitget_R_ext_cfType_Mantissa_1_out1 : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL if_sign_diff_1_R_in_0_1_out1     : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL BitSlice_out1_3                  : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Slice2_out1_17               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_3         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_3         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_3               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_3               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_3                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_2        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_2        : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_18               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice16_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice15_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator5_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice14_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice13_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator7_out1_4         : std_logic;  -- ufix1
  SIGNAL Logical_Operator6_out1_4         : std_logic;  -- ufix1
  SIGNAL Bit_Slice12_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice11_out1_4               : std_logic;  -- ufix1
  SIGNAL Logical_Operator4_out1_5         : std_logic;  -- ufix1
  SIGNAL Bit_Slice10_out1_4               : std_logic;  -- ufix1
  SIGNAL Bit_Slice9_out1_4                : std_logic;  -- ufix1
  SIGNAL Logical_Operator14_out1_3        : std_logic;  -- ufix1
  SIGNAL Logical_Operator13_out1_3        : std_logic;  -- ufix1
  SIGNAL Bit_Slice4_out1_2                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Bit_Slice8_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice7_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice6_out1                  : std_logic;  -- ufix1
  SIGNAL Bit_Slice5_out1                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator3_out1_2         : std_logic;  -- ufix1
  SIGNAL Bit_Slice3_out1_16               : std_logic;  -- ufix1
  SIGNAL Bit_Slice2_out1_18               : std_logic;  -- ufix1
  SIGNAL Bit_Slice1_out1_19               : std_logic;  -- ufix1
  SIGNAL Bit_Slice_out1_18                : std_logic;  -- ufix1
  SIGNAL Constant_out1_5                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant1_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_18                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator_out1_4          : std_logic;  -- ufix1
  SIGNAL Constant2_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch1_out1_15                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant3_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch2_out1_15                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant4_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator2_out1_1         : std_logic;  -- ufix1
  SIGNAL Switch3_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch4_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant5_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch5_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant6_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant7_out1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch7_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant8_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch8_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1_2        : std_logic;  -- ufix1
  SIGNAL Switch9_out1                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch10_out1                    : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_6                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_3                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_3                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Logical_Operator12_out1_3        : std_logic;  -- ufix1
  SIGNAL Switch13_out1_3                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch33_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant_out1_7                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant9_out1_4                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch11_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant10_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch12_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant11_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch14_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant12_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch15_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch16_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant13_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch17_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant14_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch18_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant15_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch19_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant16_out1_4                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch20_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch21_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch13_out1_4                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch34_out1_1                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Data_Type_Conversion_out1        : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL exp_R_shift1_sub_cast            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_R_shift1_sub_temp            : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL exp_R_shift1_out1                : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL DTC1_out1_3                      : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL exp_rem_0_out1                   : std_logic;  -- ufix1
  SIGNAL shift1_cfType_MantissaLength_out1 : std_logic;  -- ufix1
  SIGNAL bitsll_tmp2_shift1_out1          : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL C_out1_18                        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_shift1_cfType_MantissaLengt_out1 : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1                   : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL exp_rem_0_out1_1                 : std_logic;  -- ufix1
  SIGNAL bitsrl_tmp3_1_out1               : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice3_out1_1                 : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL C1_out1                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_exp_rem_0_out1                : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_exp_rem_0_1_out1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL C4_out1                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL if_reset_to_zero_R_0_1_out1      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL Bit_Concat_out1_4                : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice1_out1_2                 : std_logic;  -- ufix1
  SIGNAL cast_R_ext_WordLength_like_out1  : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL cast_R_ext_WordLength_like_sub_temp : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL cast_R_ext_WordLength_like_out1_1 : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_r_ext_cast_r_ext_wordl_zerosig : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_r_ext_cast_r_ext_wordl_selsig : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL dynamic_shift_zerosig_3          : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL dynamic_shift_selsig_3           : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL bitsll_R_ext_cast_R_ext_WordL_out1 : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL tmp1_0_out1                      : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_5          : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_3         : std_logic;  -- ufix1
  SIGNAL BitSlice2_out1_1                 : std_logic;  -- ufix1
  SIGNAL sticky_bitget_R_ext_1_out1       : std_logic;  -- ufix1
  SIGNAL BitSlice_out1_4                  : std_logic;  -- ufix1
  SIGNAL Logical_Operator2_out1_2         : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_2_0_out1    : std_logic;  -- ufix1
  SIGNAL alphabitget_Mant_tmp_1_0_out1    : std_logic;  -- ufix1
  SIGNAL cast_2_like_Mant_tmp_out1        : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL Mant_tmp_cast_2_like_Man_out1    : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL if_bitget_Mant_tmp_1_0_out1      : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL BitSlice2_out1_2                 : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_6          : std_logic;  -- ufix1
  SIGNAL DTC2_out1_2                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL C3_out1                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_reset_to_zero_R_0_out1        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cast_1_like_Exp_out1             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Exp_cast_1_like_Exp_out1         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Compare_To_Zero_out1_3           : std_logic;  -- ufix1
  SIGNAL Compare_To_Zero1_out1            : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_7          : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant_out1_1       : std_logic;  -- ufix1
  SIGNAL Compare_To_Constant1_out1_1      : std_logic;  -- ufix1
  SIGNAL Logical_Operator1_out1_4         : std_logic;  -- ufix1
  SIGNAL Constant_out1_8                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant2_out1_1                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch2_out1_16                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch_out1_19                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL if_rem_Exceptional_Check_cfType_out1 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Switch6_out1_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Constant2_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Compare_To_Zero_out1_4           : std_logic;  -- ufix1
  SIGNAL Logical_Operator_out1_8          : std_logic;  -- ufix1
  SIGNAL BitSlice3_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL C_out1_19                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant1_out1_1                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Constant3_out1_2                 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch3_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch1_out1_16                  : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL if_rem_Exceptional_Check_cfType_1_out1 : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL Switch5_out1_1                   : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL nfp_out_pack                     : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  -- Subsystem

  nfp_in2_unsigned <= unsigned(nfp_in2);

  -- Split 32 bit word into FP sign, exponent, mantissa
  bSign <= nfp_in2_unsigned(31);
  bExponent <= nfp_in2_unsigned(30 DOWNTO 23);
  bMantissa <= nfp_in2_unsigned(22 DOWNTO 0);

  Constant8_out1 <= '1';

  Constant3_out1 <= to_unsigned(16#00#, 8);

  nfp_in1_unsigned <= unsigned(nfp_in1);

  -- Split 32 bit word into FP sign, exponent, mantissa
  aSign <= nfp_in1_unsigned(31);
  aExponent <= nfp_in1_unsigned(30 DOWNTO 23);
  aMantissa <= nfp_in1_unsigned(22 DOWNTO 0);

  
  Compare_To_Zero_out1 <= '1' WHEN aExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  Constant_out1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1 <= aMantissa WHEN Compare_To_Zero_out1 = '0' ELSE
      Constant_out1;

  
  aMantissa_0_out1 <= '1' WHEN Switch_out1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  
  aExponent_cfType_Exponent_I_out1 <= '1' WHEN aExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  bExponent_0_out1 <= '1' WHEN bExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  
  Compare_To_Zero_out1_1 <= '1' WHEN bExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  Constant_out1_1 <= to_unsigned(16#000000#, 23);

  
  Switch_out1_1 <= bMantissa WHEN Compare_To_Zero_out1_1 = '0' ELSE
      Constant_out1_1;

  
  aExponent_0_out1 <= '1' WHEN aExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  alphaaExponent_0_aMantissa_out1 <= aMantissa_0_out1 AND aExponent_0_out1;

  
  bExponent_cfType_Exponent_I_out1 <= '1' WHEN bExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaaExponent_cfType_Exponent_out1 <= aExponent_cfType_Exponent_I_out1 OR bExponent_cfType_Exponent_I_out1;

  alphaaExponent_cfType_Exponent_out1_1 <= alphaaExponent_0_aMantissa_out1 OR alphaaExponent_cfType_Exponent_out1;

  
  bMantissa_0_out1 <= '1' WHEN Switch_out1_1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  alphabExponent_0_bMantissa_out1 <= bExponent_0_out1 AND bMantissa_0_out1;

  alphaaExponent_cfType_Exponent_out1_2 <= alphaaExponent_cfType_Exponent_out1_1 OR alphabExponent_0_bMantissa_out1;

  alpha0_out1 <= '0';

  
  Exponent_0_out1 <= '1' WHEN aExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  C_out1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1 <= aExponent WHEN Exponent_0_out1 = '0' ELSE
      C_out1;

  DTC_out1 <= signed(resize(if_Exponent_0_out1, 10));

  
  Exponent_0_out1_1 <= '1' WHEN bExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  C_out1_1 <= to_unsigned(16#01#, 8);

  
  if_Exponent_0_out1_1 <= bExponent WHEN Exponent_0_out1_1 = '0' ELSE
      C_out1_1;

  DTC1_out1 <= signed(resize(if_Exponent_0_out1_1, 10));

  exp_a_norm_exp_b_norm_sub_temp <= resize(DTC_out1, 32) - resize(DTC1_out1, 32);
  exp_a_norm_exp_b_norm_out1 <= exp_a_norm_exp_b_norm_sub_temp(10 DOWNTO 0);

  DTC1_out1_1 <= exp_a_norm_exp_b_norm_out1(9 DOWNTO 0);

  alpha1_out1 <= to_unsigned(16#0#, 4);

  
  cfType_Exponent_Inf_or_NaN_out1 <= '1' WHEN bExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaExponent_0_cfType_Exp_out1 <= cfType_Exponent_Inf_or_NaN_out1 OR Exponent_0_out1_1;

  alpha1_out1_1 <= '1';

  alpha0_out1_1 <= '0';

  
  if_Exponent_0_cfType_Exp_out1 <= alpha1_out1_1 WHEN alphaExponent_0_cfType_Exp_out1 = '0' ELSE
      alpha0_out1_1;

  Bit_Concat_out1 <= if_Exponent_0_cfType_Exp_out1 & Switch_out1_1;

  Bit_Concat1_out1 <= alpha1_out1 & Bit_Concat_out1;

  reinterpretcast_bitconcat_fi_0_out1 <= signed(Bit_Concat1_out1);

  Bit_Slice_out1 <= unsigned(reinterpretcast_bitconcat_fi_0_out1(23 DOWNTO 0));

  Bit_Slice2_out1 <= Bit_Slice_out1(7 DOWNTO 0);

  Bit_Slice16_out1 <= Bit_Slice2_out1(0);

  Bit_Slice15_out1 <= Bit_Slice2_out1(1);

  Logical_Operator5_out1 <= Bit_Slice16_out1 OR Bit_Slice15_out1;

  Bit_Slice14_out1 <= Bit_Slice2_out1(2);

  Bit_Slice13_out1 <= Bit_Slice2_out1(3);

  Logical_Operator7_out1 <= Bit_Slice14_out1 OR Bit_Slice13_out1;

  Logical_Operator6_out1 <= Logical_Operator5_out1 OR Logical_Operator7_out1;

  Bit_Slice12_out1 <= Bit_Slice2_out1(4);

  Bit_Slice11_out1 <= Bit_Slice2_out1(5);

  Logical_Operator4_out1 <= Bit_Slice12_out1 OR Bit_Slice11_out1;

  Bit_Slice10_out1 <= Bit_Slice2_out1(6);

  Bit_Slice9_out1 <= Bit_Slice2_out1(7);

  Logical_Operator14_out1 <= Bit_Slice10_out1 OR Bit_Slice9_out1;

  Logical_Operator13_out1 <= Logical_Operator4_out1 OR Logical_Operator14_out1;

  Bit_Slice1_out1 <= Bit_Slice_out1(15 DOWNTO 8);

  Bit_Slice16_out1_1 <= Bit_Slice1_out1(0);

  Bit_Slice15_out1_1 <= Bit_Slice1_out1(1);

  Logical_Operator5_out1_1 <= Bit_Slice16_out1_1 OR Bit_Slice15_out1_1;

  Bit_Slice14_out1_1 <= Bit_Slice1_out1(2);

  Bit_Slice13_out1_1 <= Bit_Slice1_out1(3);

  Logical_Operator7_out1_1 <= Bit_Slice14_out1_1 OR Bit_Slice13_out1_1;

  Logical_Operator6_out1_1 <= Logical_Operator5_out1_1 OR Logical_Operator7_out1_1;

  Bit_Slice12_out1_1 <= Bit_Slice1_out1(4);

  Bit_Slice11_out1_1 <= Bit_Slice1_out1(5);

  Logical_Operator4_out1_1 <= Bit_Slice12_out1_1 OR Bit_Slice11_out1_1;

  Bit_Slice10_out1_1 <= Bit_Slice1_out1(6);

  Bit_Slice9_out1_1 <= Bit_Slice1_out1(7);

  Logical_Operator14_out1_1 <= Bit_Slice10_out1_1 OR Bit_Slice9_out1_1;

  Logical_Operator13_out1_1 <= Logical_Operator4_out1_1 OR Logical_Operator14_out1_1;

  Bit_Slice4_out1 <= Bit_Slice_out1(23 DOWNTO 16);

  Bit_Slice16_out1_2 <= Bit_Slice4_out1(0);

  Bit_Slice15_out1_2 <= Bit_Slice4_out1(1);

  Logical_Operator5_out1_2 <= Bit_Slice16_out1_2 OR Bit_Slice15_out1_2;

  Bit_Slice14_out1_2 <= Bit_Slice4_out1(2);

  Bit_Slice13_out1_2 <= Bit_Slice4_out1(3);

  Logical_Operator7_out1_2 <= Bit_Slice14_out1_2 OR Bit_Slice13_out1_2;

  Bit_Slice12_out1_2 <= Bit_Slice4_out1(4);

  Bit_Slice11_out1_2 <= Bit_Slice4_out1(5);

  Bit_Slice10_out1_2 <= Bit_Slice4_out1(6);

  Bit_Slice9_out1_2 <= Bit_Slice4_out1(7);

  Constant_out1_2 <= to_unsigned(16#18#, 8);

  Constant9_out1 <= to_unsigned(16#7F#, 8);

  
  Switch11_out1 <= Constant_out1_2 WHEN Bit_Slice9_out1_2 = '0' ELSE
      Constant9_out1;

  Logical_Operator4_out1_2 <= Bit_Slice12_out1_2 OR Bit_Slice11_out1_2;

  Constant10_out1 <= to_unsigned(16#80#, 8);

  
  Switch12_out1 <= Switch11_out1 WHEN Bit_Slice10_out1_2 = '0' ELSE
      Constant10_out1;

  Constant11_out1 <= to_unsigned(16#81#, 8);

  
  Switch14_out1 <= Constant_out1_2 WHEN Bit_Slice11_out1_2 = '0' ELSE
      Constant11_out1;

  Constant12_out1 <= to_unsigned(16#82#, 8);

  Logical_Operator6_out1_2 <= Logical_Operator5_out1_2 OR Logical_Operator7_out1_2;

  
  Switch15_out1 <= Switch14_out1 WHEN Bit_Slice12_out1_2 = '0' ELSE
      Constant12_out1;

  
  Switch16_out1 <= Switch12_out1 WHEN Logical_Operator4_out1_2 = '0' ELSE
      Switch15_out1;

  Constant13_out1 <= to_unsigned(16#83#, 8);

  
  Switch17_out1 <= Constant_out1_2 WHEN Bit_Slice13_out1_2 = '0' ELSE
      Constant13_out1;

  Constant14_out1 <= to_unsigned(16#84#, 8);

  
  Switch18_out1 <= Switch17_out1 WHEN Bit_Slice14_out1_2 = '0' ELSE
      Constant14_out1;

  Constant15_out1 <= to_unsigned(16#85#, 8);

  
  Switch19_out1 <= Constant_out1_2 WHEN Bit_Slice15_out1_2 = '0' ELSE
      Constant15_out1;

  Constant16_out1 <= to_unsigned(16#86#, 8);

  
  Switch20_out1 <= Switch19_out1 WHEN Bit_Slice16_out1_2 = '0' ELSE
      Constant16_out1;

  Logical_Operator12_out1 <= Logical_Operator6_out1_1 OR Logical_Operator13_out1_1;

  
  Switch21_out1 <= Switch18_out1 WHEN Logical_Operator5_out1_2 = '0' ELSE
      Switch20_out1;

  
  Switch13_out1 <= Switch16_out1 WHEN Logical_Operator6_out1_2 = '0' ELSE
      Switch21_out1;

  Constant_out1_3 <= to_unsigned(16#18#, 8);

  Constant9_out1_1 <= to_unsigned(16#87#, 8);

  
  Switch11_out1_1 <= Constant_out1_3 WHEN Bit_Slice9_out1_1 = '0' ELSE
      Constant9_out1_1;

  Constant10_out1_1 <= to_unsigned(16#88#, 8);

  
  Switch12_out1_1 <= Switch11_out1_1 WHEN Bit_Slice10_out1_1 = '0' ELSE
      Constant10_out1_1;

  Constant11_out1_1 <= to_unsigned(16#89#, 8);

  
  Switch14_out1_1 <= Constant_out1_3 WHEN Bit_Slice11_out1_1 = '0' ELSE
      Constant11_out1_1;

  Constant12_out1_1 <= to_unsigned(16#8A#, 8);

  
  Switch15_out1_1 <= Switch14_out1_1 WHEN Bit_Slice12_out1_1 = '0' ELSE
      Constant12_out1_1;

  
  Switch16_out1_1 <= Switch12_out1_1 WHEN Logical_Operator4_out1_1 = '0' ELSE
      Switch15_out1_1;

  Constant13_out1_1 <= to_unsigned(16#8B#, 8);

  
  Switch17_out1_1 <= Constant_out1_3 WHEN Bit_Slice13_out1_1 = '0' ELSE
      Constant13_out1_1;

  Constant14_out1_1 <= to_unsigned(16#8C#, 8);

  
  Switch18_out1_1 <= Switch17_out1_1 WHEN Bit_Slice14_out1_1 = '0' ELSE
      Constant14_out1_1;

  Constant15_out1_1 <= to_unsigned(16#8D#, 8);

  
  Switch19_out1_1 <= Constant_out1_3 WHEN Bit_Slice15_out1_1 = '0' ELSE
      Constant15_out1_1;

  Constant16_out1_1 <= to_unsigned(16#8E#, 8);

  
  Switch20_out1_1 <= Switch19_out1_1 WHEN Bit_Slice16_out1_1 = '0' ELSE
      Constant16_out1_1;

  
  Switch21_out1_1 <= Switch18_out1_1 WHEN Logical_Operator5_out1_1 = '0' ELSE
      Switch20_out1_1;

  Logical_Operator12_out1_1 <= Logical_Operator6_out1 OR Logical_Operator13_out1;

  
  Switch13_out1_1 <= Switch16_out1_1 WHEN Logical_Operator6_out1_1 = '0' ELSE
      Switch21_out1_1;

  
  Switch33_out1 <= Switch13_out1 WHEN Logical_Operator12_out1 = '0' ELSE
      Switch13_out1_1;

  Constant_out1_4 <= to_unsigned(16#18#, 8);

  Constant9_out1_2 <= to_unsigned(16#8F#, 8);

  
  Switch11_out1_2 <= Constant_out1_4 WHEN Bit_Slice9_out1 = '0' ELSE
      Constant9_out1_2;

  Constant10_out1_2 <= to_unsigned(16#90#, 8);

  
  Switch12_out1_2 <= Switch11_out1_2 WHEN Bit_Slice10_out1 = '0' ELSE
      Constant10_out1_2;

  Constant11_out1_2 <= to_unsigned(16#91#, 8);

  
  Switch14_out1_2 <= Constant_out1_4 WHEN Bit_Slice11_out1 = '0' ELSE
      Constant11_out1_2;

  Constant12_out1_2 <= to_unsigned(16#92#, 8);

  
  Switch15_out1_2 <= Switch14_out1_2 WHEN Bit_Slice12_out1 = '0' ELSE
      Constant12_out1_2;

  
  Switch16_out1_2 <= Switch12_out1_2 WHEN Logical_Operator4_out1 = '0' ELSE
      Switch15_out1_2;

  Constant13_out1_2 <= to_unsigned(16#93#, 8);

  
  Switch17_out1_2 <= Constant_out1_4 WHEN Bit_Slice13_out1 = '0' ELSE
      Constant13_out1_2;

  Constant14_out1_2 <= to_unsigned(16#94#, 8);

  
  Switch18_out1_2 <= Switch17_out1_2 WHEN Bit_Slice14_out1 = '0' ELSE
      Constant14_out1_2;

  Constant15_out1_2 <= to_unsigned(16#95#, 8);

  
  Switch19_out1_2 <= Constant_out1_4 WHEN Bit_Slice15_out1 = '0' ELSE
      Constant15_out1_2;

  Constant16_out1_2 <= to_unsigned(16#96#, 8);

  
  Switch20_out1_2 <= Switch19_out1_2 WHEN Bit_Slice16_out1 = '0' ELSE
      Constant16_out1_2;

  
  Switch21_out1_2 <= Switch18_out1_2 WHEN Logical_Operator5_out1 = '0' ELSE
      Switch20_out1_2;

  
  Switch13_out1_2 <= Switch16_out1_2 WHEN Logical_Operator6_out1 = '0' ELSE
      Switch21_out1_2;

  
  Switch34_out1 <= Switch33_out1 WHEN Logical_Operator12_out1_1 = '0' ELSE
      Switch13_out1_2;

  exp_norm_p_sub_cast <= signed(resize(Switch34_out1, 32));
  exp_norm_p_sub_temp <= resize(DTC1_out1, 32) - exp_norm_p_sub_cast;
  exp_norm_p_out1 <= exp_norm_p_sub_temp(11 DOWNTO 0);

  Bit_Slice1_out1_1 <= exp_norm_p_out1(11);

  Logical_Operator_out1 <=  NOT Bit_Slice1_out1_1;

  alpha24_out1 <= to_signed(16#018#, 10);

  Bit_Slice4_out1_1 <= DTC1_out1_1(9);

  BitSlice_out1 <= DTC1_out1_1(0);

  Logical_Operator1_out1 <=  NOT BitSlice_out1;

  C2_out1 <= to_signed(-16#002#, 10);

  C_out1_2 <= to_signed(-16#001#, 10);

  Logical_Operator_out1_1 <= Bit_Slice4_out1_1 OR Logical_Operator1_out1;

  exp_diff_2_add_temp <= resize(DTC1_out1_1, 32) + resize(C2_out1, 32);
  exp_diff_2_out1 <= exp_diff_2_add_temp(10 DOWNTO 0);

  DTC3_out1 <= exp_diff_2_out1(9 DOWNTO 0);

  exp_diff_1_add_temp <= resize(DTC1_out1_1, 32) + resize(C_out1_2, 32);
  exp_diff_1_out1 <= exp_diff_1_add_temp(10 DOWNTO 0);

  DTC_out1_1 <= exp_diff_1_out1(9 DOWNTO 0);

  
  if_exp_diff_0_1_out1 <= DTC3_out1 WHEN Logical_Operator_out1_1 = '0' ELSE
      DTC_out1_1;

  C_out1_3 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp <= resize(if_exp_diff_0_1_out1, 32) + resize(C_out1_3, 32);
  exp_diff_in_2_out1 <= exp_diff_in_2_add_temp(10 DOWNTO 0);

  DTC3_out1_1 <= exp_diff_in_2_out1(9 DOWNTO 0);

  C_out1_4 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_1 <= resize(DTC3_out1_1, 32) + resize(C_out1_4, 32);
  exp_diff_in_2_out1_1 <= exp_diff_in_2_add_temp_1(10 DOWNTO 0);

  DTC3_out1_2 <= exp_diff_in_2_out1_1(9 DOWNTO 0);

  C_out1_5 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_2 <= resize(DTC3_out1_2, 32) + resize(C_out1_5, 32);
  exp_diff_in_2_out1_2 <= exp_diff_in_2_add_temp_2(10 DOWNTO 0);

  DTC3_out1_3 <= exp_diff_in_2_out1_2(9 DOWNTO 0);

  C_out1_6 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_3 <= resize(DTC3_out1_3, 32) + resize(C_out1_6, 32);
  exp_diff_in_2_out1_3 <= exp_diff_in_2_add_temp_3(10 DOWNTO 0);

  DTC3_out1_4 <= exp_diff_in_2_out1_3(9 DOWNTO 0);

  C_out1_7 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_4 <= resize(DTC3_out1_4, 32) + resize(C_out1_7, 32);
  exp_diff_in_2_out1_4 <= exp_diff_in_2_add_temp_4(10 DOWNTO 0);

  DTC3_out1_5 <= exp_diff_in_2_out1_4(9 DOWNTO 0);

  C_out1_8 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_5 <= resize(DTC3_out1_5, 32) + resize(C_out1_8, 32);
  exp_diff_in_2_out1_5 <= exp_diff_in_2_add_temp_5(10 DOWNTO 0);

  DTC3_out1_6 <= exp_diff_in_2_out1_5(9 DOWNTO 0);

  C_out1_9 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_6 <= resize(DTC3_out1_6, 32) + resize(C_out1_9, 32);
  exp_diff_in_2_out1_6 <= exp_diff_in_2_add_temp_6(10 DOWNTO 0);

  DTC3_out1_7 <= exp_diff_in_2_out1_6(9 DOWNTO 0);

  C_out1_10 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_7 <= resize(DTC3_out1_7, 32) + resize(C_out1_10, 32);
  exp_diff_in_2_out1_7 <= exp_diff_in_2_add_temp_7(10 DOWNTO 0);

  DTC3_out1_8 <= exp_diff_in_2_out1_7(9 DOWNTO 0);

  C_out1_11 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_8 <= resize(DTC3_out1_8, 32) + resize(C_out1_11, 32);
  exp_diff_in_2_out1_8 <= exp_diff_in_2_add_temp_8(10 DOWNTO 0);

  DTC3_out1_9 <= exp_diff_in_2_out1_8(9 DOWNTO 0);

  C_out1_12 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_9 <= resize(DTC3_out1_9, 32) + resize(C_out1_12, 32);
  exp_diff_in_2_out1_9 <= exp_diff_in_2_add_temp_9(10 DOWNTO 0);

  DTC3_out1_10 <= exp_diff_in_2_out1_9(9 DOWNTO 0);

  C_out1_13 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_10 <= resize(DTC3_out1_10, 32) + resize(C_out1_13, 32);
  exp_diff_in_2_out1_10 <= exp_diff_in_2_add_temp_10(10 DOWNTO 0);

  DTC3_out1_11 <= exp_diff_in_2_out1_10(9 DOWNTO 0);

  C_out1_14 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_11 <= resize(DTC3_out1_11, 32) + resize(C_out1_14, 32);
  exp_diff_in_2_out1_11 <= exp_diff_in_2_add_temp_11(10 DOWNTO 0);

  DTC3_out1_12 <= exp_diff_in_2_out1_11(9 DOWNTO 0);

  
  Compare_To_Constant_out1 <= '1' WHEN DTC3_out1_12 >= to_signed(-16#001#, 10) ELSE
      '0';

  alpha1_out1_2 <= to_signed(-16#001#, 10);

  
  Switch_out1_2 <= alpha1_out1_2 WHEN Compare_To_Constant_out1 = '0' ELSE
      DTC3_out1_12;

  exp_diff_max_exp_2diff_1_sub_temp <= resize(DTC1_out1_1, 32) - resize(Switch_out1_2, 32);
  exp_diff_max_exp_2diff_1_out1 <= exp_diff_max_exp_2diff_1_sub_temp(10 DOWNTO 0);

  DTC1_out1_2 <= exp_diff_max_exp_2diff_1_out1(9 DOWNTO 0);

  alpha24_pos_sub_temp <= resize(alpha24_out1, 32) - resize(DTC1_out1_2, 32);
  alpha24_pos_out1 <= alpha24_pos_sub_temp(10 DOWNTO 0);

  DTC2_out1 <= alpha24_pos_out1(9 DOWNTO 0);

  Bit_Slice_out1_1 <= DTC2_out1(9);

  alpha0_out1_2 <= to_unsigned(16#0#, 4);

  
  cfType_Exponent_Inf_or_NaN_out1_1 <= '1' WHEN aExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  alphaExponent_0_cfType_Exp_out1_1 <= cfType_Exponent_Inf_or_NaN_out1_1 OR Exponent_0_out1;

  alpha1_out1_3 <= '1';

  alpha0_out1_3 <= '0';

  
  if_Exponent_0_cfType_Exp_out1_1 <= alpha1_out1_3 WHEN alphaExponent_0_cfType_Exp_out1_1 = '0' ELSE
      alpha0_out1_3;

  Bit_Concat_out1_1 <= if_Exponent_0_cfType_Exp_out1_1 & Switch_out1;

  Bit_Concat_out1_2 <= alpha0_out1_2 & Bit_Concat_out1_1;

  reinterpretcast_bitconcat_fi_0_out1_1 <= signed(Bit_Concat_out1_2);

  alphamant_b_norm_in0 <=  - (resize(reinterpretcast_bitconcat_fi_0_out1, 29));
  alphamant_b_norm_out1 <= alphamant_b_norm_in0(27 DOWNTO 0);

  mant_a_norm_mB_add_temp <= resize(reinterpretcast_bitconcat_fi_0_out1_1, 32) + resize(alphamant_b_norm_out1, 32);
  mant_a_norm_mB_out1 <= mant_a_norm_mB_add_temp(28 DOWNTO 0);

  DTC2_out1_1 <= mant_a_norm_mB_out1(27 DOWNTO 0);

  Bit_Slice3_out1 <= DTC2_out1_1(27);

  
  if_tmp_0_out1 <= DTC2_out1_1 WHEN Bit_Slice3_out1 = '0' ELSE
      reinterpretcast_bitconcat_fi_0_out1_1;

  bitsll_mant_a_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1_1 sll 1;

  bitsll_mant_b_norm_1_out1 <= reinterpretcast_bitconcat_fi_0_out1 sll 1;

  alphatmp1_in0 <=  - (resize(bitsll_mant_b_norm_1_out1, 29));
  alphatmp1_out1 <= alphatmp1_in0(27 DOWNTO 0);

  tmp1_m2B_add_temp <= resize(bitsll_mant_a_norm_1_out1, 32) + resize(alphatmp1_out1, 32);
  tmp1_m2B_out1 <= tmp1_m2B_add_temp(28 DOWNTO 0);

  DTC5_out1 <= tmp1_m2B_out1(27 DOWNTO 0);

  Bit_Slice1_out1_2 <= DTC5_out1(27);

  tmp1_mant_b_norm_add_temp <= resize(bitsll_mant_b_norm_1_out1, 32) + resize(reinterpretcast_bitconcat_fi_0_out1, 32);
  tmp1_mant_b_norm_out1 <= tmp1_mant_b_norm_add_temp(28 DOWNTO 0);

  DTC_out1_2 <= tmp1_mant_b_norm_out1(27 DOWNTO 0);

  alphatmp2_in0 <=  - (resize(DTC_out1_2, 29));
  alphatmp2_out1 <= alphatmp2_in0(27 DOWNTO 0);

  tmp1_m3B_add_temp <= resize(bitsll_mant_a_norm_1_out1, 32) + resize(alphatmp2_out1, 32);
  tmp1_m3B_out1 <= tmp1_m3B_add_temp(28 DOWNTO 0);

  DTC6_out1 <= tmp1_m3B_out1(27 DOWNTO 0);

  Bit_Slice_out1_2 <= DTC6_out1(27);

  
  if_tmp4_0_out1 <= DTC6_out1 WHEN Bit_Slice_out1_2 = '0' ELSE
      DTC5_out1;

  tmp1_mB_add_temp <= resize(bitsll_mant_a_norm_1_out1, 32) + resize(alphamant_b_norm_out1, 32);
  tmp1_mB_out1 <= tmp1_mB_add_temp(28 DOWNTO 0);

  DTC4_out1 <= tmp1_mB_out1(27 DOWNTO 0);

  Bit_Slice2_out1_1 <= DTC4_out1(27);

  
  if_tmp2_0_out1 <= DTC4_out1 WHEN Bit_Slice2_out1_1 = '0' ELSE
      bitsll_mant_a_norm_1_out1;

  
  if_tmp3_0_out1 <= if_tmp4_0_out1 WHEN Bit_Slice1_out1_2 = '0' ELSE
      if_tmp2_0_out1;

  
  if_bitget_exp_diff_1_0_out1 <= if_tmp_0_out1 WHEN BitSlice_out1 = '0' ELSE
      if_tmp3_0_out1;

  
  if_exp_diff_0_out1 <= if_bitget_exp_diff_1_0_out1 WHEN Bit_Slice4_out1_1 = '0' ELSE
      reinterpretcast_bitconcat_fi_0_out1_1;

  Bit_Shift_out1 <= if_exp_diff_0_out1 sll 2;

  Add1_add_temp <= resize(Bit_Shift_out1, 32) + resize(alphatmp1_out1, 32);
  Add1_out1 <= Add1_add_temp(27 DOWNTO 0);

  Bit_Slice1_out1_3 <= Add1_out1(27);

  Add2_add_temp <= resize(Bit_Shift_out1, 32) + resize(alphatmp2_out1, 32);
  Add2_out1 <= Add2_add_temp(27 DOWNTO 0);

  Bit_Slice2_out1_2 <= Add2_out1(27);

  
  Switch1_out1 <= Add2_out1 WHEN Bit_Slice2_out1_2 = '0' ELSE
      Add1_out1;

  Add_add_temp <= resize(Bit_Shift_out1, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1 <= Add_add_temp(27 DOWNTO 0);

  Bit_Slice_out1_3 <= Add_out1(27);

  Bit_Slice3_out1_1 <= if_exp_diff_0_1_out1(9);

  
  Switch_out1_3 <= Add_out1 WHEN Bit_Slice_out1_3 = '0' ELSE
      Bit_Shift_out1;

  
  Switch2_out1 <= Switch1_out1 WHEN Bit_Slice1_out1_3 = '0' ELSE
      Switch_out1_3;

  
  if_exp_diff_in_0_out1 <= Switch2_out1 WHEN Bit_Slice3_out1_1 = '0' ELSE
      if_exp_diff_0_out1;

  Bit_Shift_out1_1 <= if_exp_diff_in_0_out1 sll 2;

  Add1_add_temp_1 <= resize(Bit_Shift_out1_1, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_1 <= Add1_add_temp_1(27 DOWNTO 0);

  Bit_Slice1_out1_4 <= Add1_out1_1(27);

  Add2_add_temp_1 <= resize(Bit_Shift_out1_1, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_1 <= Add2_add_temp_1(27 DOWNTO 0);

  Bit_Slice2_out1_3 <= Add2_out1_1(27);

  
  Switch1_out1_1 <= Add2_out1_1 WHEN Bit_Slice2_out1_3 = '0' ELSE
      Add1_out1_1;

  Add_add_temp_1 <= resize(Bit_Shift_out1_1, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_1 <= Add_add_temp_1(27 DOWNTO 0);

  Bit_Slice_out1_4 <= Add_out1_1(27);

  Bit_Slice3_out1_2 <= DTC3_out1_1(9);

  
  Switch_out1_4 <= Add_out1_1 WHEN Bit_Slice_out1_4 = '0' ELSE
      Bit_Shift_out1_1;

  
  Switch2_out1_1 <= Switch1_out1_1 WHEN Bit_Slice1_out1_4 = '0' ELSE
      Switch_out1_4;

  
  if_exp_diff_in_0_out1_1 <= Switch2_out1_1 WHEN Bit_Slice3_out1_2 = '0' ELSE
      if_exp_diff_in_0_out1;

  Bit_Shift_out1_2 <= if_exp_diff_in_0_out1_1 sll 2;

  Add1_add_temp_2 <= resize(Bit_Shift_out1_2, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_2 <= Add1_add_temp_2(27 DOWNTO 0);

  Bit_Slice1_out1_5 <= Add1_out1_2(27);

  Add2_add_temp_2 <= resize(Bit_Shift_out1_2, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_2 <= Add2_add_temp_2(27 DOWNTO 0);

  Bit_Slice2_out1_4 <= Add2_out1_2(27);

  
  Switch1_out1_2 <= Add2_out1_2 WHEN Bit_Slice2_out1_4 = '0' ELSE
      Add1_out1_2;

  Add_add_temp_2 <= resize(Bit_Shift_out1_2, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_2 <= Add_add_temp_2(27 DOWNTO 0);

  Bit_Slice_out1_5 <= Add_out1_2(27);

  Bit_Slice3_out1_3 <= DTC3_out1_2(9);

  
  Switch_out1_5 <= Add_out1_2 WHEN Bit_Slice_out1_5 = '0' ELSE
      Bit_Shift_out1_2;

  
  Switch2_out1_2 <= Switch1_out1_2 WHEN Bit_Slice1_out1_5 = '0' ELSE
      Switch_out1_5;

  
  if_exp_diff_in_0_out1_2 <= Switch2_out1_2 WHEN Bit_Slice3_out1_3 = '0' ELSE
      if_exp_diff_in_0_out1_1;

  Bit_Shift_out1_3 <= if_exp_diff_in_0_out1_2 sll 2;

  Add1_add_temp_3 <= resize(Bit_Shift_out1_3, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_3 <= Add1_add_temp_3(27 DOWNTO 0);

  Bit_Slice1_out1_6 <= Add1_out1_3(27);

  Add2_add_temp_3 <= resize(Bit_Shift_out1_3, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_3 <= Add2_add_temp_3(27 DOWNTO 0);

  Bit_Slice2_out1_5 <= Add2_out1_3(27);

  
  Switch1_out1_3 <= Add2_out1_3 WHEN Bit_Slice2_out1_5 = '0' ELSE
      Add1_out1_3;

  Add_add_temp_3 <= resize(Bit_Shift_out1_3, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_3 <= Add_add_temp_3(27 DOWNTO 0);

  Bit_Slice_out1_6 <= Add_out1_3(27);

  Bit_Slice3_out1_4 <= DTC3_out1_3(9);

  
  Switch_out1_6 <= Add_out1_3 WHEN Bit_Slice_out1_6 = '0' ELSE
      Bit_Shift_out1_3;

  
  Switch2_out1_3 <= Switch1_out1_3 WHEN Bit_Slice1_out1_6 = '0' ELSE
      Switch_out1_6;

  
  if_exp_diff_in_0_out1_3 <= Switch2_out1_3 WHEN Bit_Slice3_out1_4 = '0' ELSE
      if_exp_diff_in_0_out1_2;

  Bit_Shift_out1_4 <= if_exp_diff_in_0_out1_3 sll 2;

  Add1_add_temp_4 <= resize(Bit_Shift_out1_4, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_4 <= Add1_add_temp_4(27 DOWNTO 0);

  Bit_Slice1_out1_7 <= Add1_out1_4(27);

  Add2_add_temp_4 <= resize(Bit_Shift_out1_4, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_4 <= Add2_add_temp_4(27 DOWNTO 0);

  Bit_Slice2_out1_6 <= Add2_out1_4(27);

  
  Switch1_out1_4 <= Add2_out1_4 WHEN Bit_Slice2_out1_6 = '0' ELSE
      Add1_out1_4;

  Add_add_temp_4 <= resize(Bit_Shift_out1_4, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_4 <= Add_add_temp_4(27 DOWNTO 0);

  Bit_Slice_out1_7 <= Add_out1_4(27);

  Bit_Slice3_out1_5 <= DTC3_out1_4(9);

  
  Switch_out1_7 <= Add_out1_4 WHEN Bit_Slice_out1_7 = '0' ELSE
      Bit_Shift_out1_4;

  
  Switch2_out1_4 <= Switch1_out1_4 WHEN Bit_Slice1_out1_7 = '0' ELSE
      Switch_out1_7;

  
  if_exp_diff_in_0_out1_4 <= Switch2_out1_4 WHEN Bit_Slice3_out1_5 = '0' ELSE
      if_exp_diff_in_0_out1_3;

  Bit_Shift_out1_5 <= if_exp_diff_in_0_out1_4 sll 2;

  Add1_add_temp_5 <= resize(Bit_Shift_out1_5, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_5 <= Add1_add_temp_5(27 DOWNTO 0);

  Bit_Slice1_out1_8 <= Add1_out1_5(27);

  Add2_add_temp_5 <= resize(Bit_Shift_out1_5, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_5 <= Add2_add_temp_5(27 DOWNTO 0);

  Bit_Slice2_out1_7 <= Add2_out1_5(27);

  
  Switch1_out1_5 <= Add2_out1_5 WHEN Bit_Slice2_out1_7 = '0' ELSE
      Add1_out1_5;

  Add_add_temp_5 <= resize(Bit_Shift_out1_5, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_5 <= Add_add_temp_5(27 DOWNTO 0);

  Bit_Slice_out1_8 <= Add_out1_5(27);

  Bit_Slice3_out1_6 <= DTC3_out1_5(9);

  
  Switch_out1_8 <= Add_out1_5 WHEN Bit_Slice_out1_8 = '0' ELSE
      Bit_Shift_out1_5;

  
  Switch2_out1_5 <= Switch1_out1_5 WHEN Bit_Slice1_out1_8 = '0' ELSE
      Switch_out1_8;

  
  if_exp_diff_in_0_out1_5 <= Switch2_out1_5 WHEN Bit_Slice3_out1_6 = '0' ELSE
      if_exp_diff_in_0_out1_4;

  Bit_Shift_out1_6 <= if_exp_diff_in_0_out1_5 sll 2;

  Add1_add_temp_6 <= resize(Bit_Shift_out1_6, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_6 <= Add1_add_temp_6(27 DOWNTO 0);

  Bit_Slice1_out1_9 <= Add1_out1_6(27);

  Add2_add_temp_6 <= resize(Bit_Shift_out1_6, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_6 <= Add2_add_temp_6(27 DOWNTO 0);

  Bit_Slice2_out1_8 <= Add2_out1_6(27);

  
  Switch1_out1_6 <= Add2_out1_6 WHEN Bit_Slice2_out1_8 = '0' ELSE
      Add1_out1_6;

  Add_add_temp_6 <= resize(Bit_Shift_out1_6, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_6 <= Add_add_temp_6(27 DOWNTO 0);

  Bit_Slice_out1_9 <= Add_out1_6(27);

  Bit_Slice3_out1_7 <= DTC3_out1_6(9);

  
  Switch_out1_9 <= Add_out1_6 WHEN Bit_Slice_out1_9 = '0' ELSE
      Bit_Shift_out1_6;

  
  Switch2_out1_6 <= Switch1_out1_6 WHEN Bit_Slice1_out1_9 = '0' ELSE
      Switch_out1_9;

  
  if_exp_diff_in_0_out1_6 <= Switch2_out1_6 WHEN Bit_Slice3_out1_7 = '0' ELSE
      if_exp_diff_in_0_out1_5;

  Bit_Shift_out1_7 <= if_exp_diff_in_0_out1_6 sll 2;

  Add1_add_temp_7 <= resize(Bit_Shift_out1_7, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_7 <= Add1_add_temp_7(27 DOWNTO 0);

  Bit_Slice1_out1_10 <= Add1_out1_7(27);

  Add2_add_temp_7 <= resize(Bit_Shift_out1_7, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_7 <= Add2_add_temp_7(27 DOWNTO 0);

  Bit_Slice2_out1_9 <= Add2_out1_7(27);

  
  Switch1_out1_7 <= Add2_out1_7 WHEN Bit_Slice2_out1_9 = '0' ELSE
      Add1_out1_7;

  Add_add_temp_7 <= resize(Bit_Shift_out1_7, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_7 <= Add_add_temp_7(27 DOWNTO 0);

  Bit_Slice_out1_10 <= Add_out1_7(27);

  Bit_Slice3_out1_8 <= DTC3_out1_7(9);

  
  Switch_out1_10 <= Add_out1_7 WHEN Bit_Slice_out1_10 = '0' ELSE
      Bit_Shift_out1_7;

  
  Switch2_out1_7 <= Switch1_out1_7 WHEN Bit_Slice1_out1_10 = '0' ELSE
      Switch_out1_10;

  
  if_exp_diff_in_0_out1_7 <= Switch2_out1_7 WHEN Bit_Slice3_out1_8 = '0' ELSE
      if_exp_diff_in_0_out1_6;

  Bit_Shift_out1_8 <= if_exp_diff_in_0_out1_7 sll 2;

  Add1_add_temp_8 <= resize(Bit_Shift_out1_8, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_8 <= Add1_add_temp_8(27 DOWNTO 0);

  Bit_Slice1_out1_11 <= Add1_out1_8(27);

  Add2_add_temp_8 <= resize(Bit_Shift_out1_8, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_8 <= Add2_add_temp_8(27 DOWNTO 0);

  Bit_Slice2_out1_10 <= Add2_out1_8(27);

  
  Switch1_out1_8 <= Add2_out1_8 WHEN Bit_Slice2_out1_10 = '0' ELSE
      Add1_out1_8;

  Add_add_temp_8 <= resize(Bit_Shift_out1_8, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_8 <= Add_add_temp_8(27 DOWNTO 0);

  Bit_Slice_out1_11 <= Add_out1_8(27);

  Bit_Slice3_out1_9 <= DTC3_out1_8(9);

  
  Switch_out1_11 <= Add_out1_8 WHEN Bit_Slice_out1_11 = '0' ELSE
      Bit_Shift_out1_8;

  
  Switch2_out1_8 <= Switch1_out1_8 WHEN Bit_Slice1_out1_11 = '0' ELSE
      Switch_out1_11;

  
  if_exp_diff_in_0_out1_8 <= Switch2_out1_8 WHEN Bit_Slice3_out1_9 = '0' ELSE
      if_exp_diff_in_0_out1_7;

  Bit_Shift_out1_9 <= if_exp_diff_in_0_out1_8 sll 2;

  Add1_add_temp_9 <= resize(Bit_Shift_out1_9, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_9 <= Add1_add_temp_9(27 DOWNTO 0);

  Bit_Slice1_out1_12 <= Add1_out1_9(27);

  Add2_add_temp_9 <= resize(Bit_Shift_out1_9, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_9 <= Add2_add_temp_9(27 DOWNTO 0);

  Bit_Slice2_out1_11 <= Add2_out1_9(27);

  
  Switch1_out1_9 <= Add2_out1_9 WHEN Bit_Slice2_out1_11 = '0' ELSE
      Add1_out1_9;

  Add_add_temp_9 <= resize(Bit_Shift_out1_9, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_9 <= Add_add_temp_9(27 DOWNTO 0);

  Bit_Slice_out1_12 <= Add_out1_9(27);

  Bit_Slice3_out1_10 <= DTC3_out1_9(9);

  
  Switch_out1_12 <= Add_out1_9 WHEN Bit_Slice_out1_12 = '0' ELSE
      Bit_Shift_out1_9;

  
  Switch2_out1_9 <= Switch1_out1_9 WHEN Bit_Slice1_out1_12 = '0' ELSE
      Switch_out1_12;

  
  if_exp_diff_in_0_out1_9 <= Switch2_out1_9 WHEN Bit_Slice3_out1_10 = '0' ELSE
      if_exp_diff_in_0_out1_8;

  Bit_Shift_out1_10 <= if_exp_diff_in_0_out1_9 sll 2;

  Add1_add_temp_10 <= resize(Bit_Shift_out1_10, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_10 <= Add1_add_temp_10(27 DOWNTO 0);

  Bit_Slice1_out1_13 <= Add1_out1_10(27);

  Add2_add_temp_10 <= resize(Bit_Shift_out1_10, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_10 <= Add2_add_temp_10(27 DOWNTO 0);

  Bit_Slice2_out1_12 <= Add2_out1_10(27);

  
  Switch1_out1_10 <= Add2_out1_10 WHEN Bit_Slice2_out1_12 = '0' ELSE
      Add1_out1_10;

  Add_add_temp_10 <= resize(Bit_Shift_out1_10, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_10 <= Add_add_temp_10(27 DOWNTO 0);

  Bit_Slice_out1_13 <= Add_out1_10(27);

  Bit_Slice3_out1_11 <= DTC3_out1_10(9);

  
  Switch_out1_13 <= Add_out1_10 WHEN Bit_Slice_out1_13 = '0' ELSE
      Bit_Shift_out1_10;

  
  Switch2_out1_10 <= Switch1_out1_10 WHEN Bit_Slice1_out1_13 = '0' ELSE
      Switch_out1_13;

  
  if_exp_diff_in_0_out1_10 <= Switch2_out1_10 WHEN Bit_Slice3_out1_11 = '0' ELSE
      if_exp_diff_in_0_out1_9;

  Bit_Shift_out1_11 <= if_exp_diff_in_0_out1_10 sll 2;

  Add1_add_temp_11 <= resize(Bit_Shift_out1_11, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_11 <= Add1_add_temp_11(27 DOWNTO 0);

  Bit_Slice1_out1_14 <= Add1_out1_11(27);

  Add2_add_temp_11 <= resize(Bit_Shift_out1_11, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_11 <= Add2_add_temp_11(27 DOWNTO 0);

  Bit_Slice2_out1_13 <= Add2_out1_11(27);

  
  Switch1_out1_11 <= Add2_out1_11 WHEN Bit_Slice2_out1_13 = '0' ELSE
      Add1_out1_11;

  Add_add_temp_11 <= resize(Bit_Shift_out1_11, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_11 <= Add_add_temp_11(27 DOWNTO 0);

  Bit_Slice_out1_14 <= Add_out1_11(27);

  Bit_Slice3_out1_12 <= DTC3_out1_11(9);

  
  Switch_out1_14 <= Add_out1_11 WHEN Bit_Slice_out1_14 = '0' ELSE
      Bit_Shift_out1_11;

  
  Switch2_out1_11 <= Switch1_out1_11 WHEN Bit_Slice1_out1_14 = '0' ELSE
      Switch_out1_14;

  
  if_exp_diff_in_0_out1_11 <= Switch2_out1_11 WHEN Bit_Slice3_out1_12 = '0' ELSE
      if_exp_diff_in_0_out1_10;

  bitsll_R_1_out1 <= if_exp_diff_in_0_out1_11 sll 1;

  
  bitsll_R_1_mant_b_norm_relop1 <= '1' WHEN bitsll_R_1_out1 >= reinterpretcast_bitconcat_fi_0_out1 ELSE
      '0';

  mant_b_norm_R_sub_temp <= resize(reinterpretcast_bitconcat_fi_0_out1, 32) - resize(if_exp_diff_in_0_out1_11, 32);
  mant_b_norm_R_out1 <= mant_b_norm_R_sub_temp(28 DOWNTO 0);

  DTC_out1_3 <= mant_b_norm_R_out1(27 DOWNTO 0);

  
  if_bitsll_R_1_mant_b_norm_out1 <= if_exp_diff_in_0_out1_11 WHEN bitsll_R_1_mant_b_norm_relop1 = '0' ELSE
      DTC_out1_3;

  shift_arithmetic_zerosig <= to_signed(16#000#, 10);

  
  shift_arithmetic_selsig <= DTC1_out1_2 WHEN DTC1_out1_2 >= shift_arithmetic_zerosig ELSE
      shift_arithmetic_zerosig;

  dynamic_shift_zerosig <= to_signed(16#000#, 10);

  
  dynamic_shift_selsig <= shift_arithmetic_selsig WHEN shift_arithmetic_selsig >= dynamic_shift_zerosig ELSE
      dynamic_shift_zerosig;

  Shift_Arithmetic_out1 <= SHIFT_RIGHT(if_bitsll_R_1_mant_b_norm_out1, to_integer(dynamic_shift_selsig));

  
  bitsrl_x_pos_0_out1 <= '1' WHEN Shift_Arithmetic_out1 = to_signed(16#0000000#, 28) ELSE
      '0';

  bitsll_x_shift_length_zerosig <= to_signed(16#000#, 10);

  
  bitsll_x_shift_length_selsig <= DTC2_out1 WHEN DTC2_out1 >= bitsll_x_shift_length_zerosig ELSE
      bitsll_x_shift_length_zerosig;

  dynamic_shift_zerosig_1 <= to_signed(16#000#, 10);

  
  dynamic_shift_selsig_1 <= bitsll_x_shift_length_selsig WHEN bitsll_x_shift_length_selsig >= dynamic_shift_zerosig_1 ELSE
      dynamic_shift_zerosig_1;

  bitsll_x_shift_length_out1 <= if_bitsll_R_1_mant_b_norm_out1 sll to_integer(dynamic_shift_selsig_1);

  BitSlice_out1_1 <= unsigned(bitsll_x_shift_length_out1(23 DOWNTO 0));

  
  Compare_To_Constant1_out1 <= '1' WHEN DTC1_out1_1 > to_signed(16#020#, 10) ELSE
      '0';

  
  Compare_To_Zero_out1_2 <= '1' WHEN DTC1_out1_1 < to_signed(16#000#, 10) ELSE
      '0';

  Logical_Operator_out1_2 <=  NOT (Logical_Operator_out1 OR Compare_To_Zero_out1_2);

  
  x_0_out1 <= '1' WHEN if_bitsll_R_1_mant_b_norm_out1 = to_signed(16#0000000#, 28) ELSE
      '0';

  
  pos_0_out1 <= '1' WHEN DTC1_out1_2 > to_signed(16#000#, 10) ELSE
      '0';

  BitSlice1_out1 <= unsigned(reinterpretcast_bitconcat_fi_0_out1_1(23 DOWNTO 0));

  
  tmp2_tmp3_relop1 <= '1' WHEN BitSlice_out1_1 < BitSlice1_out1 ELSE
      '0';

  Logical_Operator2_out1 <= tmp2_tmp3_relop1 AND (bitsrl_x_pos_0_out1 AND pos_0_out1);

  Logical_Operator3_out1 <= Logical_Operator2_out1 OR (Bit_Slice_out1_1 OR x_0_out1);

  Logical_Operator1_out1_1 <= Logical_Operator_out1_2 AND Logical_Operator3_out1;

  Logical_Operator4_out1_3 <= Compare_To_Constant1_out1 OR Logical_Operator1_out1_1;

  Logical_Operator_out1_3 <= aSign XOR bSign;

  C_out1_15 <= to_signed(-16#002#, 10);

  exp_diff_in_2_add_temp_12 <= resize(DTC3_out1_12, 32) + resize(C_out1_15, 32);
  exp_diff_in_2_out1_12 <= exp_diff_in_2_add_temp_12(10 DOWNTO 0);

  DTC3_out1_13 <= exp_diff_in_2_out1_12(9 DOWNTO 0);

  C_out1_16 <= to_signed(-16#002#, 10);

  Bit_Shift_out1_12 <= if_exp_diff_in_0_out1_11 sll 2;

  Add1_add_temp_12 <= resize(Bit_Shift_out1_12, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_12 <= Add1_add_temp_12(27 DOWNTO 0);

  Bit_Slice1_out1_15 <= Add1_out1_12(27);

  Add2_add_temp_12 <= resize(Bit_Shift_out1_12, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_12 <= Add2_add_temp_12(27 DOWNTO 0);

  Bit_Slice2_out1_14 <= Add2_out1_12(27);

  
  Switch1_out1_12 <= Add2_out1_12 WHEN Bit_Slice2_out1_14 = '0' ELSE
      Add1_out1_12;

  Add_add_temp_12 <= resize(Bit_Shift_out1_12, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_12 <= Add_add_temp_12(27 DOWNTO 0);

  Bit_Slice_out1_15 <= Add_out1_12(27);

  Bit_Slice3_out1_13 <= DTC3_out1_12(9);

  
  Switch_out1_15 <= Add_out1_12 WHEN Bit_Slice_out1_15 = '0' ELSE
      Bit_Shift_out1_12;

  
  Switch2_out1_12 <= Switch1_out1_12 WHEN Bit_Slice1_out1_15 = '0' ELSE
      Switch_out1_15;

  
  if_exp_diff_in_0_out1_12 <= Switch2_out1_12 WHEN Bit_Slice3_out1_13 = '0' ELSE
      if_exp_diff_in_0_out1_11;

  Bit_Shift_out1_13 <= if_exp_diff_in_0_out1_12 sll 2;

  Add1_add_temp_13 <= resize(Bit_Shift_out1_13, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_13 <= Add1_add_temp_13(27 DOWNTO 0);

  Bit_Slice1_out1_16 <= Add1_out1_13(27);

  Add2_add_temp_13 <= resize(Bit_Shift_out1_13, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_13 <= Add2_add_temp_13(27 DOWNTO 0);

  Bit_Slice2_out1_15 <= Add2_out1_13(27);

  
  Switch1_out1_13 <= Add2_out1_13 WHEN Bit_Slice2_out1_15 = '0' ELSE
      Add1_out1_13;

  Add_add_temp_13 <= resize(Bit_Shift_out1_13, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_13 <= Add_add_temp_13(27 DOWNTO 0);

  Bit_Slice_out1_16 <= Add_out1_13(27);

  Bit_Slice3_out1_14 <= DTC3_out1_13(9);

  
  Switch_out1_16 <= Add_out1_13 WHEN Bit_Slice_out1_16 = '0' ELSE
      Bit_Shift_out1_13;

  
  Switch2_out1_13 <= Switch1_out1_13 WHEN Bit_Slice1_out1_16 = '0' ELSE
      Switch_out1_16;

  
  if_exp_diff_in_0_out1_13 <= Switch2_out1_13 WHEN Bit_Slice3_out1_14 = '0' ELSE
      if_exp_diff_in_0_out1_12;

  Bit_Shift_out1_14 <= if_exp_diff_in_0_out1_13 sll 2;

  Add1_add_temp_14 <= resize(Bit_Shift_out1_14, 32) + resize(alphatmp1_out1, 32);
  Add1_out1_14 <= Add1_add_temp_14(27 DOWNTO 0);

  Bit_Slice1_out1_17 <= Add1_out1_14(27);

  Add2_add_temp_14 <= resize(Bit_Shift_out1_14, 32) + resize(alphatmp2_out1, 32);
  Add2_out1_14 <= Add2_add_temp_14(27 DOWNTO 0);

  Bit_Slice2_out1_16 <= Add2_out1_14(27);

  
  Switch1_out1_14 <= Add2_out1_14 WHEN Bit_Slice2_out1_16 = '0' ELSE
      Add1_out1_14;

  Add_add_temp_14 <= resize(Bit_Shift_out1_14, 32) + resize(alphamant_b_norm_out1, 32);
  Add_out1_14 <= Add_add_temp_14(27 DOWNTO 0);

  Bit_Slice_out1_17 <= Add_out1_14(27);

  exp_diff_in_2_add_temp_13 <= resize(DTC3_out1_13, 32) + resize(C_out1_16, 32);
  exp_diff_in_2_out1_13 <= exp_diff_in_2_add_temp_13(10 DOWNTO 0);

  DTC3_out1_14 <= exp_diff_in_2_out1_13(9 DOWNTO 0);

  Bit_Slice3_out1_15 <= DTC3_out1_14(9);

  
  Switch_out1_17 <= Add_out1_14 WHEN Bit_Slice_out1_17 = '0' ELSE
      Bit_Shift_out1_14;

  
  Switch2_out1_14 <= Switch1_out1_14 WHEN Bit_Slice1_out1_17 = '0' ELSE
      Switch_out1_17;

  
  if_exp_diff_in_0_out1_14 <= Switch2_out1_14 WHEN Bit_Slice3_out1_15 = '0' ELSE
      if_exp_diff_in_0_out1_13;

  
  R_in_0_out1 <= '1' WHEN if_exp_diff_in_0_out1_14 /= to_signed(16#0000000#, 28) ELSE
      '0';

  alphasign_diff_1_R_in_0_out1 <= Logical_Operator_out1_3 AND R_in_0_out1;

  alpha0_out1_4 <= to_unsigned(16#0#, 2);

  Bit_Concat_out1_3 <= unsigned(if_exp_diff_in_0_out1_14) & alpha0_out1_4;

  reinterpretcast_bitconcat_R_in_out1 <= signed(Bit_Concat_out1_3);

  exp_b_norm_exp_a_norm_sub_temp <= resize(DTC1_out1, 32) - resize(DTC_out1, 32);
  exp_b_norm_exp_a_norm_out1 <= exp_b_norm_exp_a_norm_sub_temp(10 DOWNTO 0);

  DTC_out1_4 <= exp_b_norm_exp_a_norm_out1(9 DOWNTO 0);

  
  shift_length_0_out1 <= '1' WHEN DTC_out1_4 > to_signed(16#000#, 10) ELSE
      '0';

  alphaR_ext_in0 <=  - (resize(reinterpretcast_bitconcat_R_in_out1, 31));
  alphaR_ext_out1 <= alphaR_ext_in0(29 DOWNTO 0);

  
  shift_length_cfType_Mantiss_out1 <= '1' WHEN DTC_out1_4 >= to_signed(16#01A#, 10) ELSE
      '0';

  bitsra_r_ext_shift_length_zerosig <= to_signed(16#000#, 10);

  
  bitsra_r_ext_shift_length_selsig <= DTC_out1_4 WHEN DTC_out1_4 >= bitsra_r_ext_shift_length_zerosig ELSE
      bitsra_r_ext_shift_length_zerosig;

  dynamic_shift_zerosig_2 <= to_signed(16#000#, 10);

  
  dynamic_shift_selsig_2 <= bitsra_r_ext_shift_length_selsig WHEN bitsra_r_ext_shift_length_selsig >= dynamic_shift_zerosig_2 ELSE
      dynamic_shift_zerosig_2;

  bitsra_R_ext_shift_length_out1 <= SHIFT_RIGHT(alphaR_ext_out1, to_integer(dynamic_shift_selsig_2));

  C_out1_17 <= to_signed(-16#00000001#, 30);

  
  if_shift_length_cfType_Mantis_out1 <= bitsra_R_ext_shift_length_out1 WHEN shift_length_cfType_Mantiss_out1 = '0' ELSE
      C_out1_17;

  alphamB1_in0 <=  - (resize(alphamant_b_norm_out1, 29));
  alphamB1_out1 <= alphamB1_in0(27 DOWNTO 0);

  
  if_shift_length_0_out1 <= alphaR_ext_out1 WHEN shift_length_0_out1 = '0' ELSE
      if_shift_length_cfType_Mantis_out1;

  alpha1_out1_4 <= to_unsigned(16#0#, 2);

  Bit_Concat1_out1_1 <= unsigned(alphamB1_out1) & alpha1_out1_4;

  reinterpretcast_bitconcat_mB1_out1 <= signed(Bit_Concat1_out1_1);

  mB1_ext_R_ext_add_temp <= resize(if_shift_length_0_out1, 32) + resize(reinterpretcast_bitconcat_mB1_out1, 32);
  mB1_ext_R_ext_out1 <= mB1_ext_R_ext_add_temp(29 DOWNTO 0);

  BitSlice_out1_2 <= mB1_ext_R_ext_out1(25);

  Logical_Operator3_out1_1 <=  NOT BitSlice_out1_2;

  BitSlice1_out1_1 <= mB1_ext_R_ext_out1(24);

  alphabitget_R_ext_cfType_Mantissa_out1 <= Logical_Operator3_out1_1 AND BitSlice1_out1_1;

  bitsll_R_ext_1_out1 <= mB1_ext_R_ext_out1 sll 1;

  
  if_bitget_R_ext_cfType_Mantissa_out1 <= mB1_ext_R_ext_out1 WHEN alphabitget_R_ext_cfType_Mantissa_out1 = '0' ELSE
      bitsll_R_ext_1_out1;

  
  if_sign_diff_1_R_in_0_out1 <= reinterpretcast_bitconcat_R_in_out1 WHEN alphasign_diff_1_R_in_0_out1 = '0' ELSE
      if_bitget_R_ext_cfType_Mantissa_out1;

  BitSlice3_out1 <= unsigned(if_sign_diff_1_R_in_0_out1(25 DOWNTO 1));

  
  R_0_out1 <= '1' WHEN BitSlice3_out1 = to_unsigned(16#0000000#, 25) ELSE
      '0';

  reset_to_zero_R_0_out1 <= Logical_Operator4_out1_3 OR R_0_out1;

  
  if_exp_a_norm_exp_b_norm_out1 <= DTC1_out1 WHEN shift_length_0_out1 = '0' ELSE
      DTC_out1;

  cast_1_like_exp_R_out1 <= to_signed(16#001#, 10);

  exp_R_cast_1_like_exp_R_sub_temp <= resize(DTC1_out1, 32) - resize(cast_1_like_exp_R_out1, 32);
  exp_R_cast_1_like_exp_R_out1 <= exp_R_cast_1_like_exp_R_sub_temp(9 DOWNTO 0);

  
  if_bitget_R_ext_cfType_Mantissa_1_out1 <= DTC1_out1 WHEN alphabitget_R_ext_cfType_Mantissa_out1 = '0' ELSE
      exp_R_cast_1_like_exp_R_out1;

  
  if_sign_diff_1_R_in_0_1_out1 <= if_exp_a_norm_exp_b_norm_out1 WHEN alphasign_diff_1_R_in_0_out1 = '0' ELSE
      if_bitget_R_ext_cfType_Mantissa_1_out1;

  BitSlice_out1_3 <= BitSlice3_out1(24 DOWNTO 1);

  Bit_Slice2_out1_17 <= BitSlice_out1_3(23 DOWNTO 16);

  Bit_Slice16_out1_3 <= Bit_Slice2_out1_17(7);

  Bit_Slice15_out1_3 <= Bit_Slice2_out1_17(6);

  Logical_Operator5_out1_3 <= Bit_Slice16_out1_3 OR Bit_Slice15_out1_3;

  Bit_Slice14_out1_3 <= Bit_Slice2_out1_17(5);

  Bit_Slice13_out1_3 <= Bit_Slice2_out1_17(4);

  Logical_Operator7_out1_3 <= Bit_Slice14_out1_3 OR Bit_Slice13_out1_3;

  Logical_Operator6_out1_3 <= Logical_Operator5_out1_3 OR Logical_Operator7_out1_3;

  Bit_Slice12_out1_3 <= Bit_Slice2_out1_17(3);

  Bit_Slice11_out1_3 <= Bit_Slice2_out1_17(2);

  Logical_Operator4_out1_4 <= Bit_Slice12_out1_3 OR Bit_Slice11_out1_3;

  Bit_Slice10_out1_3 <= Bit_Slice2_out1_17(1);

  Bit_Slice9_out1_3 <= Bit_Slice2_out1_17(0);

  Logical_Operator14_out1_2 <= Bit_Slice10_out1_3 OR Bit_Slice9_out1_3;

  Logical_Operator13_out1_2 <= Logical_Operator4_out1_4 OR Logical_Operator14_out1_2;

  Bit_Slice1_out1_18 <= BitSlice_out1_3(15 DOWNTO 8);

  Bit_Slice16_out1_4 <= Bit_Slice1_out1_18(7);

  Bit_Slice15_out1_4 <= Bit_Slice1_out1_18(6);

  Logical_Operator5_out1_4 <= Bit_Slice16_out1_4 OR Bit_Slice15_out1_4;

  Bit_Slice14_out1_4 <= Bit_Slice1_out1_18(5);

  Bit_Slice13_out1_4 <= Bit_Slice1_out1_18(4);

  Logical_Operator7_out1_4 <= Bit_Slice14_out1_4 OR Bit_Slice13_out1_4;

  Logical_Operator6_out1_4 <= Logical_Operator5_out1_4 OR Logical_Operator7_out1_4;

  Bit_Slice12_out1_4 <= Bit_Slice1_out1_18(3);

  Bit_Slice11_out1_4 <= Bit_Slice1_out1_18(2);

  Logical_Operator4_out1_5 <= Bit_Slice12_out1_4 OR Bit_Slice11_out1_4;

  Bit_Slice10_out1_4 <= Bit_Slice1_out1_18(1);

  Bit_Slice9_out1_4 <= Bit_Slice1_out1_18(0);

  Logical_Operator14_out1_3 <= Bit_Slice10_out1_4 OR Bit_Slice9_out1_4;

  Logical_Operator13_out1_3 <= Logical_Operator4_out1_5 OR Logical_Operator14_out1_3;

  Bit_Slice4_out1_2 <= BitSlice_out1_3(7 DOWNTO 0);

  Bit_Slice8_out1 <= Bit_Slice4_out1_2(7);

  Bit_Slice7_out1 <= Bit_Slice4_out1_2(6);

  Logical_Operator1_out1_2 <= Bit_Slice8_out1 OR Bit_Slice7_out1;

  Bit_Slice6_out1 <= Bit_Slice4_out1_2(5);

  Bit_Slice5_out1 <= Bit_Slice4_out1_2(4);

  Logical_Operator3_out1_2 <= Bit_Slice6_out1 OR Bit_Slice5_out1;

  Bit_Slice3_out1_16 <= Bit_Slice4_out1_2(3);

  Bit_Slice2_out1_18 <= Bit_Slice4_out1_2(2);

  Bit_Slice1_out1_19 <= Bit_Slice4_out1_2(1);

  Bit_Slice_out1_18 <= Bit_Slice4_out1_2(0);

  Constant_out1_5 <= to_unsigned(16#18#, 8);

  Constant1_out1 <= to_unsigned(16#17#, 8);

  
  Switch_out1_18 <= Constant_out1_5 WHEN Bit_Slice_out1_18 = '0' ELSE
      Constant1_out1;

  Logical_Operator_out1_4 <= Bit_Slice3_out1_16 OR Bit_Slice2_out1_18;

  Constant2_out1 <= to_unsigned(16#16#, 8);

  
  Switch1_out1_15 <= Switch_out1_18 WHEN Bit_Slice1_out1_19 = '0' ELSE
      Constant2_out1;

  Constant3_out1_1 <= to_unsigned(16#15#, 8);

  
  Switch2_out1_15 <= Constant_out1_5 WHEN Bit_Slice2_out1_18 = '0' ELSE
      Constant3_out1_1;

  Constant4_out1 <= to_unsigned(16#14#, 8);

  Logical_Operator2_out1_1 <= Logical_Operator1_out1_2 OR Logical_Operator3_out1_2;

  
  Switch3_out1 <= Switch2_out1_15 WHEN Bit_Slice3_out1_16 = '0' ELSE
      Constant4_out1;

  
  Switch4_out1 <= Switch1_out1_15 WHEN Logical_Operator_out1_4 = '0' ELSE
      Switch3_out1;

  Constant5_out1 <= to_unsigned(16#13#, 8);

  
  Switch5_out1 <= Constant_out1_5 WHEN Bit_Slice5_out1 = '0' ELSE
      Constant5_out1;

  Constant6_out1 <= to_unsigned(16#12#, 8);

  
  Switch6_out1 <= Switch5_out1 WHEN Bit_Slice6_out1 = '0' ELSE
      Constant6_out1;

  Constant7_out1 <= to_unsigned(16#11#, 8);

  
  Switch7_out1 <= Constant_out1_5 WHEN Bit_Slice7_out1 = '0' ELSE
      Constant7_out1;

  Constant8_out1_1 <= to_unsigned(16#10#, 8);

  
  Switch8_out1 <= Switch7_out1 WHEN Bit_Slice8_out1 = '0' ELSE
      Constant8_out1_1;

  Logical_Operator12_out1_2 <= Logical_Operator6_out1_4 OR Logical_Operator13_out1_3;

  
  Switch9_out1 <= Switch6_out1 WHEN Logical_Operator1_out1_2 = '0' ELSE
      Switch8_out1;

  
  Switch10_out1 <= Switch4_out1 WHEN Logical_Operator2_out1_1 = '0' ELSE
      Switch9_out1;

  Constant_out1_6 <= to_unsigned(16#18#, 8);

  Constant9_out1_3 <= to_unsigned(16#0F#, 8);

  
  Switch11_out1_3 <= Constant_out1_6 WHEN Bit_Slice9_out1_4 = '0' ELSE
      Constant9_out1_3;

  Constant10_out1_3 <= to_unsigned(16#0E#, 8);

  
  Switch12_out1_3 <= Switch11_out1_3 WHEN Bit_Slice10_out1_4 = '0' ELSE
      Constant10_out1_3;

  Constant11_out1_3 <= to_unsigned(16#0D#, 8);

  
  Switch14_out1_3 <= Constant_out1_6 WHEN Bit_Slice11_out1_4 = '0' ELSE
      Constant11_out1_3;

  Constant12_out1_3 <= to_unsigned(16#0C#, 8);

  
  Switch15_out1_3 <= Switch14_out1_3 WHEN Bit_Slice12_out1_4 = '0' ELSE
      Constant12_out1_3;

  
  Switch16_out1_3 <= Switch12_out1_3 WHEN Logical_Operator4_out1_5 = '0' ELSE
      Switch15_out1_3;

  Constant13_out1_3 <= to_unsigned(16#0B#, 8);

  
  Switch17_out1_3 <= Constant_out1_6 WHEN Bit_Slice13_out1_4 = '0' ELSE
      Constant13_out1_3;

  Constant14_out1_3 <= to_unsigned(16#0A#, 8);

  
  Switch18_out1_3 <= Switch17_out1_3 WHEN Bit_Slice14_out1_4 = '0' ELSE
      Constant14_out1_3;

  Constant15_out1_3 <= to_unsigned(16#09#, 8);

  
  Switch19_out1_3 <= Constant_out1_6 WHEN Bit_Slice15_out1_4 = '0' ELSE
      Constant15_out1_3;

  Constant16_out1_3 <= to_unsigned(16#08#, 8);

  
  Switch20_out1_3 <= Switch19_out1_3 WHEN Bit_Slice16_out1_4 = '0' ELSE
      Constant16_out1_3;

  
  Switch21_out1_3 <= Switch18_out1_3 WHEN Logical_Operator5_out1_4 = '0' ELSE
      Switch20_out1_3;

  Logical_Operator12_out1_3 <= Logical_Operator6_out1_3 OR Logical_Operator13_out1_2;

  
  Switch13_out1_3 <= Switch16_out1_3 WHEN Logical_Operator6_out1_4 = '0' ELSE
      Switch21_out1_3;

  
  Switch33_out1_1 <= Switch10_out1 WHEN Logical_Operator12_out1_2 = '0' ELSE
      Switch13_out1_3;

  Constant_out1_7 <= to_unsigned(16#18#, 8);

  Constant9_out1_4 <= to_unsigned(16#07#, 8);

  
  Switch11_out1_4 <= Constant_out1_7 WHEN Bit_Slice9_out1_3 = '0' ELSE
      Constant9_out1_4;

  Constant10_out1_4 <= to_unsigned(16#06#, 8);

  
  Switch12_out1_4 <= Switch11_out1_4 WHEN Bit_Slice10_out1_3 = '0' ELSE
      Constant10_out1_4;

  Constant11_out1_4 <= to_unsigned(16#05#, 8);

  
  Switch14_out1_4 <= Constant_out1_7 WHEN Bit_Slice11_out1_3 = '0' ELSE
      Constant11_out1_4;

  Constant12_out1_4 <= to_unsigned(16#04#, 8);

  
  Switch15_out1_4 <= Switch14_out1_4 WHEN Bit_Slice12_out1_3 = '0' ELSE
      Constant12_out1_4;

  
  Switch16_out1_4 <= Switch12_out1_4 WHEN Logical_Operator4_out1_4 = '0' ELSE
      Switch15_out1_4;

  Constant13_out1_4 <= to_unsigned(16#03#, 8);

  
  Switch17_out1_4 <= Constant_out1_7 WHEN Bit_Slice13_out1_3 = '0' ELSE
      Constant13_out1_4;

  Constant14_out1_4 <= to_unsigned(16#02#, 8);

  
  Switch18_out1_4 <= Switch17_out1_4 WHEN Bit_Slice14_out1_3 = '0' ELSE
      Constant14_out1_4;

  Constant15_out1_4 <= to_unsigned(16#01#, 8);

  
  Switch19_out1_4 <= Constant_out1_7 WHEN Bit_Slice15_out1_3 = '0' ELSE
      Constant15_out1_4;

  Constant16_out1_4 <= to_unsigned(16#00#, 8);

  
  Switch20_out1_4 <= Switch19_out1_4 WHEN Bit_Slice16_out1_3 = '0' ELSE
      Constant16_out1_4;

  
  Switch21_out1_4 <= Switch18_out1_4 WHEN Logical_Operator5_out1_3 = '0' ELSE
      Switch20_out1_4;

  
  Switch13_out1_4 <= Switch16_out1_4 WHEN Logical_Operator6_out1_3 = '0' ELSE
      Switch21_out1_4;

  
  Switch34_out1_1 <= Switch33_out1_1 WHEN Logical_Operator12_out1_3 = '0' ELSE
      Switch13_out1_4;

  Data_Type_Conversion_out1 <= Switch34_out1_1(4 DOWNTO 0);

  exp_R_shift1_sub_cast <= signed(resize(Data_Type_Conversion_out1, 32));
  exp_R_shift1_sub_temp <= resize(if_sign_diff_1_R_in_0_1_out1, 32) - exp_R_shift1_sub_cast;
  exp_R_shift1_out1 <= exp_R_shift1_sub_temp(11 DOWNTO 0);

  DTC1_out1_3 <= exp_R_shift1_out1(9 DOWNTO 0);

  
  exp_rem_0_out1 <= '1' WHEN DTC1_out1_3 <= to_signed(16#000#, 10) ELSE
      '0';

  
  shift1_cfType_MantissaLength_out1 <= '1' WHEN Data_Type_Conversion_out1 > to_unsigned(16#18#, 5) ELSE
      '0';

  bitsll_tmp2_shift1_out1 <= BitSlice3_out1 sll to_integer(Data_Type_Conversion_out1);

  C_out1_18 <= to_unsigned(16#0000000#, 25);

  
  if_shift1_cfType_MantissaLengt_out1 <= bitsll_tmp2_shift1_out1 WHEN shift1_cfType_MantissaLength_out1 = '0' ELSE
      C_out1_18;

  BitSlice2_out1 <= if_shift1_cfType_MantissaLengt_out1(23 DOWNTO 0);

  
  exp_rem_0_out1_1 <= '1' WHEN DTC1_out1_3 < to_signed(16#000#, 10) ELSE
      '0';

  bitsrl_tmp3_1_out1 <= if_shift1_cfType_MantissaLengt_out1 srl 1;

  BitSlice3_out1_1 <= bitsrl_tmp3_1_out1(23 DOWNTO 0);

  C1_out1 <= to_unsigned(16#000000#, 24);

  
  if_exp_rem_0_out1 <= BitSlice3_out1_1 WHEN exp_rem_0_out1_1 = '0' ELSE
      C1_out1;

  
  if_exp_rem_0_1_out1 <= BitSlice2_out1 WHEN exp_rem_0_out1 = '0' ELSE
      if_exp_rem_0_out1;

  C4_out1 <= to_unsigned(16#000000#, 24);

  
  if_reset_to_zero_R_0_1_out1 <= if_exp_rem_0_1_out1 WHEN reset_to_zero_R_0_out1 = '0' ELSE
      C4_out1;

  Bit_Concat_out1_4 <= alpha0_out1 & if_reset_to_zero_R_0_1_out1;

  BitSlice1_out1_2 <= Bit_Concat_out1_4(1);

  cast_R_ext_WordLength_like_out1 <= to_signed(16#01E#, 10);

  cast_R_ext_WordLength_like_sub_temp <= resize(cast_R_ext_WordLength_like_out1, 32) - resize(DTC_out1_4, 32);
  cast_R_ext_WordLength_like_out1_1 <= cast_R_ext_WordLength_like_sub_temp(10 DOWNTO 0);

  bitsll_r_ext_cast_r_ext_wordl_zerosig <= to_signed(16#000#, 11);

  
  bitsll_r_ext_cast_r_ext_wordl_selsig <= cast_R_ext_WordLength_like_out1_1 WHEN cast_R_ext_WordLength_like_out1_1 >= bitsll_r_ext_cast_r_ext_wordl_zerosig ELSE
      bitsll_r_ext_cast_r_ext_wordl_zerosig;

  dynamic_shift_zerosig_3 <= to_signed(16#000#, 11);

  
  dynamic_shift_selsig_3 <= bitsll_r_ext_cast_r_ext_wordl_selsig WHEN bitsll_r_ext_cast_r_ext_wordl_selsig >= dynamic_shift_zerosig_3 ELSE
      dynamic_shift_zerosig_3;

  bitsll_R_ext_cast_R_ext_WordL_out1 <= alphaR_ext_out1 sll to_integer(dynamic_shift_selsig_3);

  
  tmp1_0_out1 <= '1' WHEN bitsll_R_ext_cast_R_ext_WordL_out1 /= to_signed(16#00000000#, 30) ELSE
      '0';

  Logical_Operator_out1_5 <= tmp1_0_out1 OR shift_length_cfType_Mantiss_out1;

  Logical_Operator1_out1_3 <= Logical_Operator_out1_5 AND shift_length_0_out1;

  BitSlice2_out1_1 <= if_bitget_R_ext_cfType_Mantissa_out1(0);

  sticky_bitget_R_ext_1_out1 <= Logical_Operator1_out1_3 OR BitSlice2_out1_1;

  BitSlice_out1_4 <= Bit_Concat_out1_4(0);

  Logical_Operator2_out1_2 <= sticky_bitget_R_ext_1_out1 AND alphasign_diff_1_R_in_0_out1;

  alphabitget_Mant_tmp_2_0_out1 <= BitSlice1_out1_2 OR Logical_Operator2_out1_2;

  alphabitget_Mant_tmp_1_0_out1 <= BitSlice_out1_4 AND alphabitget_Mant_tmp_2_0_out1;

  cast_2_like_Mant_tmp_out1 <= to_unsigned(16#0000002#, 25);

  Mant_tmp_cast_2_like_Man_out1 <= resize(resize(Bit_Concat_out1_4, 32) + resize(cast_2_like_Mant_tmp_out1, 32), 25);

  
  if_bitget_Mant_tmp_1_0_out1 <= Bit_Concat_out1_4 WHEN alphabitget_Mant_tmp_1_0_out1 = '0' ELSE
      Mant_tmp_cast_2_like_Man_out1;

  BitSlice2_out1_2 <= if_bitget_Mant_tmp_1_0_out1(24);

  Logical_Operator_out1_6 <= exp_rem_0_out1 OR reset_to_zero_R_0_out1;

  DTC2_out1_2 <= unsigned(DTC1_out1_3(7 DOWNTO 0));

  C3_out1 <= to_unsigned(16#00#, 8);

  
  if_reset_to_zero_R_0_out1 <= DTC2_out1_2 WHEN Logical_Operator_out1_6 = '0' ELSE
      C3_out1;

  cast_1_like_Exp_out1 <= to_unsigned(16#01#, 8);

  Exp_cast_1_like_Exp_out1 <= if_reset_to_zero_R_0_out1 + cast_1_like_Exp_out1;

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_out1 <= if_reset_to_zero_R_0_out1 WHEN BitSlice2_out1_2 = '0' ELSE
      Exp_cast_1_like_Exp_out1;

  
  Compare_To_Zero_out1_3 <= '1' WHEN Switch_out1_1 = to_unsigned(16#000000#, 23) ELSE
      '0';

  
  Compare_To_Zero1_out1 <= '1' WHEN bExponent = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_7 <= Compare_To_Zero_out1_3 AND Compare_To_Zero1_out1;

  
  Compare_To_Constant_out1_1 <= '1' WHEN aExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  
  Compare_To_Constant1_out1_1 <= '1' WHEN bExponent = to_unsigned(16#FF#, 8) ELSE
      '0';

  Logical_Operator1_out1_4 <= Compare_To_Constant_out1_1 OR Compare_To_Constant1_out1_1;

  Constant_out1_8 <= to_unsigned(16#00#, 8);

  Constant2_out1_1 <= to_unsigned(16#FF#, 8);

  
  Switch2_out1_16 <= Constant_out1_8 WHEN Logical_Operator1_out1_4 = '0' ELSE
      Constant2_out1_1;

  
  Switch_out1_19 <= Switch2_out1_16 WHEN Logical_Operator_out1_7 = '0' ELSE
      aExponent;

  
  if_rem_Exceptional_Check_cfType_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_out1 WHEN alphaaExponent_cfType_Exponent_out1_2 = '0' ELSE
      Switch_out1_19;

  
  Switch6_out1_1 <= Constant3_out1 WHEN Constant8_out1 = '0' ELSE
      if_rem_Exceptional_Check_cfType_out1;

  Constant2_out1_2 <= to_unsigned(16#000000#, 23);

  
  Compare_To_Zero_out1_4 <= '1' WHEN if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = to_unsigned(16#00#, 8) ELSE
      '0';

  Logical_Operator_out1_8 <= Compare_To_Zero_out1_4 OR BitSlice2_out1_2;

  BitSlice3_out1_2 <= if_bitget_Mant_tmp_1_0_out1(23 DOWNTO 1);

  C_out1_19 <= to_unsigned(16#000000#, 23);

  
  if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 <= BitSlice3_out1_2 WHEN Logical_Operator_out1_8 = '0' ELSE
      C_out1_19;

  Constant1_out1_1 <= to_unsigned(16#000000#, 23);

  Constant3_out1_2 <= to_unsigned(16#400000#, 23);

  
  Switch3_out1_1 <= Constant1_out1_1 WHEN Logical_Operator1_out1_4 = '0' ELSE
      Constant3_out1_2;

  
  Switch1_out1_16 <= Switch3_out1_1 WHEN Logical_Operator_out1_7 = '0' ELSE
      Switch_out1;

  
  if_rem_Exceptional_Check_cfType_1_out1 <= if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 WHEN alphaaExponent_cfType_Exponent_out1_2 = '0' ELSE
      Switch1_out1_16;

  
  Switch5_out1_1 <= Constant2_out1_2 WHEN Constant8_out1 = '0' ELSE
      if_rem_Exceptional_Check_cfType_1_out1;

  -- Combine FP sign, exponent, mantissa into 32 bit word
  nfp_out_pack <= bSign & Switch6_out1_1 & Switch5_out1_1;

  nfp_out <= std_logic_vector(nfp_out_pack);

END rtl;

